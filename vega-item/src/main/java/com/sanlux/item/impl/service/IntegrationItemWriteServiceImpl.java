package com.sanlux.item.impl.service;

import com.google.common.base.Throwables;
import com.sanlux.item.enums.IntegrationItemStatus;
import com.sanlux.item.impl.dao.IntegrationItemDao;
import com.sanlux.item.model.IntegrationItem;
import com.sanlux.item.service.IntegrationItemWriteService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Code generated by terminus code gen
 * Desc: 积分商品表写服务实现类
 * Date: 2016-11-07
 */
@Slf4j
@Service
@RpcProvider
public class IntegrationItemWriteServiceImpl implements IntegrationItemWriteService {

    private final IntegrationItemDao integrationItemDao;

    @Autowired
    public IntegrationItemWriteServiceImpl(IntegrationItemDao integrationItemDao) {
        this.integrationItemDao = integrationItemDao;
    }

    @Override
    public Response<Long> create(IntegrationItem integrationItem) {
        try {
            integrationItem.setStatus(IntegrationItemStatus.ONSHELF.value());
            integrationItemDao.create(integrationItem);
            return Response.ok(integrationItem.getId());
        } catch (Exception e) {
            log.error("create integrationItem failed, integrationItem:{}, cause:{}",
                    integrationItem, Throwables.getStackTraceAsString(e));
            return Response.fail("integration.item.create.fail");
        }
    }

    @Override
    public Response<Boolean> update(IntegrationItem integrationItem) {
        try {
            return Response.ok(integrationItemDao.update(integrationItem));
        } catch (Exception e) {
            log.error("update integrationItem failed, integrationItem:{}, cause:{}",
                    integrationItem, Throwables.getStackTraceAsString(e));
            return Response.fail("integration.item.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteById(Long integrationItemId) {
        try {
            return Response.ok(integrationItemDao.delete(integrationItemId));
        } catch (Exception e) {
            log.error("delete integrationItem failed, integrationItemId:{}, cause:{}",
                    integrationItemId, Throwables.getStackTraceAsString(e));
            return Response.fail("integration.item.delete.fail");
        }
    }

    @Override
    public Response<Boolean> setStatus(Long id, Integer status) {
        try {
            return Response.ok(integrationItemDao.updateStatus(id, status));
        } catch (Exception e) {
            log.error("update integrationItem status failed, id:{}, status:{} cause:{}",
                    id, status, Throwables.getStackTraceAsString(e));
            return Response.fail("integration.item.update.status.fail");
        }
    }

    @Override
    public Response<Boolean> checkAndReduceStock(Long id, Integer quantity) {
        try {
            IntegrationItem item = integrationItemDao.findById(id);
            if (item == null) {
                log.error("integration item find fail, id:{}", id);
                return Response.fail("integration.item.find.fail");
            }
            if (item.getStockQuantity() == null || item.getStockQuantity() < quantity) {
                log.error("integration item stock quantity less than quantity:{}", quantity);
                return Response.fail("integration.item.stock.less.than.quantity");
            }
            item.setStockQuantity(item.getStockQuantity() - quantity);

            Integer status = item.getStatus();
            if (item.getStockQuantity() == 0) {
                status = IntegrationItemStatus.OFFSHELF.value();
            }
            return Response.ok(integrationItemDao.updateStockQuantity(id, item.getStockQuantity(), status));
        }  catch (Exception e) {
            log.error("reduce integrationItem stock quantity failed, id:{}, quantity:{} cause:{}",
                    id, quantity, Throwables.getStackTraceAsString(e));
            return Response.fail("reduce.integration.item.stock.quantity.fail");
        }
    }
}
