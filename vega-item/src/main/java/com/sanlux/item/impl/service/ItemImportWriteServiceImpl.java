package com.sanlux.item.impl.service;

import com.google.common.base.Splitter;
import com.google.common.base.Strings;
import com.google.common.base.Throwables;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.sanlux.category.service.VegaCategoryReadService;
import com.sanlux.common.constants.DefaultItemStatus;
import com.sanlux.common.utils.ListSum;
import com.sanlux.item.dto.ItemsToCreate;
import com.sanlux.item.dto.VegaItemUploaded;
import com.sanlux.item.dto.api.*;
import com.sanlux.item.dto.excel.UploadRaw;
import com.sanlux.item.enums.ToolMallItemImportStatus;
import com.sanlux.item.enums.VegaItemImportType;
import com.sanlux.item.impl.dao.ItemImportDao;
import com.sanlux.item.impl.internal.ItemImportExecutor;
import com.sanlux.item.impl.manager.VegaItemManager;
import com.sanlux.item.impl.utils.UploadHelper;
import com.sanlux.item.model.ItemImport;
import com.sanlux.item.service.ItemImportWriteService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.exception.JsonResponseException;
import io.terminus.common.exception.ServiceException;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Arguments;
import io.terminus.common.utils.JsonMapper;
import io.terminus.common.utils.Splitters;
import io.terminus.parana.attribute.dto.*;
import io.terminus.parana.brand.impl.dao.BrandDao;
import io.terminus.parana.brand.model.Brand;
import io.terminus.parana.cache.ShopCacher;
import io.terminus.parana.category.impl.dao.BackCategoryDao;
import io.terminus.parana.category.impl.dao.CategoryAttributeDao;
import io.terminus.parana.category.model.BackCategory;
import io.terminus.parana.category.model.CategoryAttribute;
import io.terminus.parana.common.utils.Iters;
import io.terminus.parana.delivery.impl.dao.DeliveryFeeTemplateDao;
import io.terminus.parana.delivery.model.DeliveryFeeTemplate;
import io.terminus.parana.delivery.model.ItemDeliveryFee;
import io.terminus.parana.item.common.Digestors;
import io.terminus.parana.item.dto.FullItem;
import io.terminus.parana.item.impl.dao.ItemAttributeDao;
import io.terminus.parana.item.impl.dao.ItemDao;
import io.terminus.parana.item.impl.dao.ItemDetailDao;
import io.terminus.parana.item.impl.dao.SkuDao;
import io.terminus.parana.item.model.Item;
import io.terminus.parana.item.model.ItemAttribute;
import io.terminus.parana.item.model.ItemDetail;
import io.terminus.parana.item.model.Sku;
import io.terminus.parana.shop.model.Shop;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.util.StringUtils;

import java.util.*;
import java.util.stream.Collectors;

/**
 * Code generated by terminus code gen
 * Desc: 商品导入处理表写服务实现类
 * Date: 2016-10-17
 */
@Slf4j
@Service
@RpcProvider
public class ItemImportWriteServiceImpl implements ItemImportWriteService {

    private final ItemImportDao itemImportDao;

    private final CategoryAttributeDao categoryAttributeDao;

    private final BrandDao brandDao;

    private final VegaItemManager vegaItemManager;

    private final DeliveryFeeTemplateDao deliveryFeeTemplateDao;

    private final BackCategoryDao backCategoryDao;

    private final ItemDao itemDao;

    private final SkuDao skuDao;

    private final ItemAttributeDao itemAttributeDao;

    private final ItemDetailDao itemDetailDao;

    @Autowired
    private ItemImportExecutor itemImportExecutor;

    @Autowired
    private VegaCategoryReadService vegaCategoryReadService;

    @Autowired
    private ShopCacher shopCacher;

    @Autowired
    public ItemImportWriteServiceImpl(ItemImportDao itemImportDao,
                                      CategoryAttributeDao categoryAttributeDao,
                                      BrandDao brandDao,
                                      VegaItemManager vegaItemManager,
                                      DeliveryFeeTemplateDao deliveryFeeTemplateDao,
                                      BackCategoryDao backCategoryDao,
                                      ItemDao itemDao,
                                      SkuDao skuDao,
                                      ItemAttributeDao itemAttributeDao,
                                      ItemDetailDao itemDetailDao) {
        this.itemImportDao = itemImportDao;
        this.categoryAttributeDao = categoryAttributeDao;
        this.brandDao = brandDao;
        this.vegaItemManager = vegaItemManager;
        this.deliveryFeeTemplateDao = deliveryFeeTemplateDao;
        this.backCategoryDao = backCategoryDao;
        this.itemDao = itemDao;
        this.skuDao = skuDao;
        this.itemAttributeDao = itemAttributeDao;
        this.itemDetailDao = itemDetailDao;
    }


    @Override
    public Response<Long> uploadToImportRaw(Long shopId, UploadRaw rawData) {
        if (rawData == null) {
            return Response.fail("upload.items.fail.excel.has.error");
        }
        try {

            UploadHelper uploadHelper = new UploadHelper(rawData, Sets.newHashSet("parent_child"));
            Integer lineNum = uploadHelper.lineCount();
            if (lineNum <= 0) {
                // TODO: 暂时 0 代表终结
                return Response.ok(0L);
            }

            // 后台类目
            Long categoryId = getCategoryId(uploadHelper.getMeta());

            List<CategoryAttribute> attributes = categoryAttributeDao.findByCategoryId(categoryId);

            Set<String> sellingFields = new HashSet<>();
            for (CategoryAttribute ca : attributes) {
                if (Objects.equals(ca.getAttrMetas().get(AttributeMetaKey.SKU_CANDIDATE), "true")) {
                    sellingFields.add("custom_" + ca.getAttrKey());
                }
            }

            uploadHelper.getHeader().checkFieldExists(sellingFields);

            List<ItemsToCreate> itemsToCreates = Lists.newArrayList();

            for (int loopItem = 0; loopItem < lineNum; ) {
                UploadHelper.LineHelper parentLine = uploadHelper.getLine(loopItem);

                Integer parentType = parentLine.getValue("parent_child", true, getTypeProcessor(), 1);
                Brand brand = brandDao.findByName(parentLine.getValue("brand", true, UploadHelper.STRING_VALUE_PROCESSOR));

                ItemsToCreate toCreate = new ItemsToCreate();

                toCreate.setCategoryId(categoryId);
                toCreate.setUnitMeasure(parentLine.getValue("default_unit_of_measure", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                toCreate.setUnitAmount(parentLine.getValue("default_per_unit_amount", true, UploadHelper.INT_VALUE_PROCESSOR));
                toCreate.setName(parentLine.getValue("item_name", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                toCreate.setItemCode(parentLine.getValue("code", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                toCreate.setItemOuterId(parentLine.getValue("item_outer_id", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                toCreate.setBrandCode(parentLine.getValue("brand_code", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                toCreate.setItemImage(parentLine.getValue("image", false, UploadHelper.STRING_VALUE_PROCESSOR));
                toCreate.setAssistantUnit(parentLine.getValue("assistant_unit", false, UploadHelper.STRING_VALUE_PROCESSOR));
                toCreate.setTrademarkName(parentLine.getValue("trademark_name", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                toCreate.setNormalAttrs(getCustomAttributes(parentLine, false, sellingFields));

                Long deliveryFeeTemplateId = parentLine.getValue("delivery_fee_template_id", false, UploadHelper.LONG_VALUE_PROCESSOR);
                DeliveryFeeTemplate deliveryFeeTemplate = deliveryFeeTemplateDao.findById(deliveryFeeTemplateId);
                if (deliveryFeeTemplate == null) {
                    log.error("delivery fee template find by id :{} fail", deliveryFeeTemplateId);
                    throw new ServiceException("delivery.fee.template.not.find");
                }
                toCreate.setDeliveryFeeTemplateId(deliveryFeeTemplateId);

                if (brand != null) {
                    toCreate.setBrandId(brand.getId());
                    toCreate.setBrandName(brand.getName());
                }

                //单规格商品
                if (parentType == 2) {

                    List<ItemsToCreate> children = Lists.newArrayList();
                    ItemsToCreate child = new ItemsToCreate();

                    child.setBrandCode(parentLine.getValue("brand_code", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                    child.setOtherNo(parentLine.getValue("other_no", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                    child.setSkuOuterId(child.getBrandCode() + child.getOtherNo());
                    child.setAssistantUnit(parentLine.getValue("assistant_unit", false, UploadHelper.STRING_VALUE_PROCESSOR));
                    child.setTrademarkName(parentLine.getValue("trademark_name", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                    child.setItemPrice(parentLine.getValue("price", true, UploadHelper.INT_VALUE_PROCESSOR));
                    child.setStockQuantity(parentLine.getValue("stock_quantity", true, UploadHelper.INT_VALUE_PROCESSOR));
                    child.setUnitMeasure(parentLine.getValue("default_unit_of_measure", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                    child.setUnitAmount(parentLine.getValue("default_per_unit_amount", true, UploadHelper.INT_VALUE_PROCESSOR));
                    child.setSellAttrs(getCustomAttributes(parentLine, true, sellingFields));

                    children.add(child);
                    toCreate.setChildren(children);

                    ++loopItem;
                } else if (parentType == 1) {
                    int loopSku = loopItem;
                    List<ItemsToCreate> children = Lists.newArrayList();
                    for (; loopSku < lineNum; ++loopSku) {

                        val childLine = uploadHelper.getLine(loopSku);
                        Integer childType = childLine.getValue("parent_child", false, getTypeProcessor(), 1);
                        if (childType != 1) {
                            // 非规格
                            if (loopSku == loopItem + 1) {
                                throw parentLine.error("only.has.one.specifications");
                            }
                            break;
                        }


                        //规格
                        ItemsToCreate child = new ItemsToCreate();

                        child.setBrandCode(childLine.getValue("brand_code", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                        child.setOtherNo(childLine.getValue("other_no", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                        child.setSkuOuterId(child.getBrandCode() + child.getOtherNo());
                        child.setAssistantUnit(childLine.getValue("assistant_unit", false, UploadHelper.STRING_VALUE_PROCESSOR));
                        child.setTrademarkName(childLine.getValue("trademark_name", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                        child.setItemPrice(childLine.getValue("price", true, UploadHelper.INT_VALUE_PROCESSOR));
                        child.setStockQuantity(childLine.getValue("stock_quantity", true, UploadHelper.INT_VALUE_PROCESSOR));
                        child.setUnitMeasure(childLine.getValue("default_unit_of_measure", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                        child.setUnitAmount(childLine.getValue("default_per_unit_amount", true, UploadHelper.INT_VALUE_PROCESSOR));
                        child.setSellAttrs(getCustomAttributes(childLine, true, sellingFields));

                        children.add(child);

                        if (loopSku + 1 != lineNum) {
                            String outerItemId = uploadHelper.getLine(loopSku + 1).getValue("item_outer_id", false, UploadHelper.STRING_VALUE_PROCESSOR);
                            if(!Objects.isNull(outerItemId)){
                                outerItemId=outerItemId.trim();
                            }
                            if (!Strings.isNullOrEmpty(outerItemId)) {
                                //多个多规格商品相连分隔
                                ++loopSku;
                                break;
                            }
                        }


                    }
                    toCreate.setChildren(children);

                    loopItem = loopSku;
                } else {
                    log.error("data error, unknown error");
                    throw new ServiceException("data.error.unknown.error");

                }
                List<ItemsToCreate> children = toCreate.getChildren();
                toCreate.setStockQuantity(ListSum.listSum(Lists.transform(children, ItemsToCreate::getStockQuantity)));


                itemsToCreates.add(toCreate);

            }

            return this.uploadToImport(shopId, itemsToCreates, VegaItemImportType.EXCEL.value());
        } catch (ServiceException e) {
            log.warn("upload to import raw failed, shopId={}, data(count={} rows), error={}",
                    shopId, Iters.nullToEmpty(rawData.getLines()).size(), e.getMessage());
            return Response.fail(e.getMessage());
        } catch (Exception e) {
            log.error("upload to import raw failed, shopId={}, bidId={}, data(count={} rows), cause:{}",
                    shopId, Iters.nullToEmpty(rawData.getLines()).size(), Throwables.getStackTraceAsString(e));
            return Response.fail("upload.items.fail.unknown.error");
        }
    }

    @Override
    public Response<Long> importItemsByExcel(Long shopId, UploadRaw rawData) {
        if (rawData == null) {
            return Response.fail("upload.items.fail.excel.has.error");
        }
        try {

            UploadHelper uploadHelper = new UploadHelper(rawData, Sets.newHashSet("parent_child"));
            Integer lineNum = uploadHelper.lineCount();
            if (lineNum <= 0) {
                // TODO: 暂时 0 代表终结
                return Response.ok(0L);
            }

            List<ItemsToCreate> itemsToCreates = Lists.newArrayList();
            for (int loopItem = 0; loopItem < lineNum; ) {
                UploadHelper.LineHelper parentLine = uploadHelper.getLine(loopItem);

                Integer parentType = parentLine.getValue("parent_child", true, getTypeProcessor(), 1);
                Brand brand = brandDao.findByName(parentLine.getValue("brand", true, UploadHelper.STRING_VALUE_PROCESSOR));

                ItemsToCreate toCreate = new ItemsToCreate();

                BackCategory category = backCategoryDao.findByOuterId(parentLine.getValue("out_category_id", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                if (Arguments.isNull(category) || category.getHasChildren()) {
                    ++loopItem;
                    continue;
                }

                toCreate.setCategoryId(category.getId());
                toCreate.setUnitMeasure(parentLine.getValue("default_unit_of_measure", false, UploadHelper.STRING_VALUE_PROCESSOR, "无").trim());
                toCreate.setUnitAmount(parentLine.getValue("default_per_unit_amount", true, UploadHelper.INT_VALUE_PROCESSOR));
                toCreate.setName(parentLine.getValue("item_name", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                toCreate.setItemCode(parentLine.getValue("code", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                toCreate.setItemOuterId(parentLine.getValue("item_outer_id", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                toCreate.setBrandCode(parentLine.getValue("brand_code", false, UploadHelper.STRING_VALUE_PROCESSOR, "无").trim());

                List<String> images = Splitters.COMMA.splitToList(parentLine.getValue("image", false, UploadHelper.STRING_VALUE_PROCESSOR));
                if (!Arguments.isNullOrEmpty(images)) {
                    toCreate.setItemImage(images.get(0));

                    List<Map<String, String>> imagesList = Lists.newArrayList();
                    String imageUrl0 = "http:" + images.get(0).replaceAll("http:", "").replaceAll("https:", "");
                    String itemDetail = "<img src=\"" + imageUrl0 + "\">";
                    for (int i = 1; i < images.size(); i++) {
                        Map<String, String> imagesMap = Maps.newHashMap();
                        imagesMap.put("url", images.get(i));
                        imagesList.add(imagesMap);

                        String imageUrl = "http:" + images.get(i).replaceAll("http:", "").replaceAll("https:", "");
                        itemDetail += "<img src=\"" + imageUrl + "\">";
                    }
                    toCreate.setImagesJson(JsonMapper.JSON_NON_EMPTY_MAPPER.toJson(imagesList));

                    toCreate.setItemDetail(itemDetail); //商品详情,从商品主图中获取
                }


                toCreate.setAssistantUnit(parentLine.getValue("assistant_unit", false, UploadHelper.STRING_VALUE_PROCESSOR, "无"));
                toCreate.setTrademarkName(parentLine.getValue("trademark_name", false, UploadHelper.STRING_VALUE_PROCESSOR, "无").trim());
                //toCreate.setItemDetail(parentLine.getValue("item_detail", false, UploadHelper.STRING_VALUE_PROCESSOR)); //商品详情

                Long deliveryFeeTemplateId = parentLine.getValue("delivery_fee_template_id", false, UploadHelper.LONG_VALUE_PROCESSOR);
                DeliveryFeeTemplate deliveryFeeTemplate = deliveryFeeTemplateDao.findById(deliveryFeeTemplateId);
                if (deliveryFeeTemplate == null) {
                    log.error("delivery fee template find by id :{} fail", deliveryFeeTemplateId);
                    throw new ServiceException("delivery.fee.template.not.find");
                }
                toCreate.setDeliveryFeeTemplateId(deliveryFeeTemplateId);

                if (brand != null) {
                    toCreate.setBrandId(brand.getId());
                    toCreate.setBrandName(brand.getName());
                }

                //单规格商品
                if (parentType == 2) {

                    List<ItemsToCreate> children = Lists.newArrayList();
                    ItemsToCreate child = new ItemsToCreate();

                    child.setBrandCode(parentLine.getValue("brand_code", false, UploadHelper.STRING_VALUE_PROCESSOR, "无").trim());
                    child.setOtherNo(parentLine.getValue("other_no", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                    child.setSkuOuterId(parentLine.getValue("sku_outer_id", true, UploadHelper.STRING_VALUE_PROCESSOR).trim());
                    child.setAssistantUnit(parentLine.getValue("assistant_unit", false, UploadHelper.STRING_VALUE_PROCESSOR, "无"));
                    child.setTrademarkName(parentLine.getValue("trademark_name", false, UploadHelper.STRING_VALUE_PROCESSOR, "无").trim());
                    child.setItemPrice(parentLine.getValue("price", true, UploadHelper.INT_VALUE_PROCESSOR));
                    child.setStockQuantity(parentLine.getValue("stock_quantity", true, UploadHelper.INT_VALUE_PROCESSOR));
                    child.setUnitMeasure(parentLine.getValue("default_unit_of_measure", false, UploadHelper.STRING_VALUE_PROCESSOR, "无").trim());
                    child.setUnitAmount(parentLine.getValue("default_per_unit_amount", true, UploadHelper.INT_VALUE_PROCESSOR));

                    children.add(child);
                    toCreate.setChildren(children);

                    ++loopItem;
                } else {
                    log.error("data error, unknown error");
                    throw new ServiceException("data.error.unknown.error");
                }
                List<ItemsToCreate> children = toCreate.getChildren();
                toCreate.setStockQuantity(ListSum.listSum(Lists.transform(children, ItemsToCreate::getStockQuantity)));
                itemsToCreates.add(toCreate);
            }

            return this.uploadToImport(shopId, itemsToCreates, VegaItemImportType.EXCEL.value());
        } catch (ServiceException e) {
            log.warn("upload to import raw failed, shopId={}, data(count={} rows), error={}",
                    shopId, Iters.nullToEmpty(rawData.getLines()).size(), e.getMessage());
            return Response.fail(e.getMessage());
        } catch (Exception e) {
            log.error("upload to import raw failed, shopId={}, bidId={}, data(count={} rows), cause:{}",
                    shopId, Iters.nullToEmpty(rawData.getLines()).size(), Throwables.getStackTraceAsString(e));
            return Response.fail("upload.items.fail.unknown.error");
        }
    }

    @Override
    public Response<Long> importItemsByApi(Long shopId, String outIdTag, Long deliveryFeeTemplateId, SubmittedItemImportDto submittedItemImportDto, Integer type) {
        List<ItemCreateApiDto> itemCreatesByApi = submittedItemImportDto.getBody();
        try {
            List<ItemsToCreate> itemsToCreates = Lists.newArrayList();

            for (ItemCreateApiDto itemCreateApiDto : itemCreatesByApi) {
                ItemsToCreate toCreate = new ItemsToCreate();

                BackCategory category = backCategoryDao.findByOuterId(itemCreateApiDto.getCategoryId());
                if (Arguments.isNull(category) || category.getHasChildren()) {
                    return Response.fail("商品类目查不到或非叶子节点");
                }

                toCreate.setCategoryId(category.getId());
                
                toCreate.setUnitMeasure(itemCreateApiDto.getUnitMeasure().trim());
                toCreate.setName(itemCreateApiDto.getName().trim());
                toCreate.setItemCode(outIdTag.concat(itemCreateApiDto.getItemOutId().trim()));
                toCreate.setItemOuterId(itemCreateApiDto.getItemOutId().trim());
                toCreate.setBrandCode(itemCreateApiDto.getBrandCode().trim());

                String[] imagesArray = itemCreateApiDto.getImagesArray();
                toCreate.setItemImage(imagesArray[0].trim()); // 第一张图片
                toCreate.setAssistantUnit(itemCreateApiDto.getAssistantUnit());
                toCreate.setTrademarkName(itemCreateApiDto.getTrademarkName());
                toCreate.setDeliveryFeeTemplateId(deliveryFeeTemplateId);
                toCreate.setItemDetail(itemCreateApiDto.getItemDetail());
                toCreate.setSelfPlatformLink(itemCreateApiDto.getItemOutUrl());
                toCreate.setUnitAmount(1); //默认1
                List<Map<String, String>> imagesList = Lists.newArrayList();
                for (int i = 1; i < imagesArray.length; i++) {
                    Map<String, String> imagesMap = Maps.newHashMap();
                    imagesMap.put("url", imagesArray[i]);
                    imagesList.add(imagesMap);
                }
                toCreate.setImagesJson(JsonMapper.JSON_NON_EMPTY_MAPPER.toJson(imagesList));

                if (Arguments.notNull(itemCreateApiDto.getBrandName())) {
                    Brand brand = brandDao.findByName(itemCreateApiDto.getBrandName().trim());
                    if (brand != null) {
                        toCreate.setBrandId(brand.getId());
                        toCreate.setBrandName(brand.getName());
                    }
                }

                List<ItemAttributesDto> itemSellAttributesAllList = Lists.newArrayList();
                List<ItemAttributesDto> itemNormalAttributesAllList = Lists.newArrayList();
                if (!Arguments.isNullOrEmpty(itemCreateApiDto.getNormalAttrs())) {
                    itemNormalAttributesAllList.addAll(itemCreateApiDto.getNormalAttrs());
                }

                int index = 0;
                List<ItemsToCreate> skusToCreates = Lists.newArrayList();
                for (SkuCreateApiDto skuCreateApiDto : itemCreateApiDto.getChildren()) {
                    ItemsToCreate skuToCreate = new ItemsToCreate();

                    if (index > 0) {
                        List<String> skuSellAttributesKeyList =   Lists.transform(skuCreateApiDto.getSellAttrs(), ItemAttributesDto::getAttrsKey);
                        List<String> oldSkuSellAttributesKeyList =   Lists.transform(itemCreateApiDto.getChildren().get(index - 1).getSellAttrs(), ItemAttributesDto::getAttrsKey);

                        if (!skuSellAttributesKeyList.containsAll(oldSkuSellAttributesKeyList)) {
                            return Response.fail("SKU销售属性键值不一致");
                        }

                    }

                    skuToCreate.setSkuOuterId(outIdTag.concat(skuCreateApiDto.getSkuOutId().trim()));
                    skuToCreate.setItemPrice(Integer.parseInt(skuCreateApiDto.getItemPrice()));
                    skuToCreate.setStockQuantity(Integer.parseInt(skuCreateApiDto.getStockQuantity()));
                    skuToCreate.setUnitAmount(Integer.parseInt(skuCreateApiDto.getUnitAmount()));
                    skuToCreate.setOtherNo(skuCreateApiDto.getSkuOutId().trim()); // "对方货号"同"外部SKUID"

                    // 以下四项值取item中的数据
                    skuToCreate.setName(itemCreateApiDto.getName().trim());
                    skuToCreate.setBrandCode(itemCreateApiDto.getBrandCode().trim());
                    skuToCreate.setAssistantUnit(itemCreateApiDto.getAssistantUnit().trim());
                    skuToCreate.setTrademarkName(itemCreateApiDto.getTrademarkName().trim());

                    itemSellAttributesAllList.addAll(skuCreateApiDto.getSellAttrs());
                    if (!Arguments.isNullOrEmpty(skuCreateApiDto.getSellAttrs())) {
                        skuToCreate.setSellAttrs(skuCreateApiDto.getSellAttrs().stream().collect(Collectors.toMap(ItemAttributesDto::getAttrsKey, ItemAttributesDto::getAttrsValue)));
                    }

                    skusToCreates.add(skuToCreate);
                    index ++;
                }

                toCreate.setChildren(skusToCreates);
                toCreate.setStockQuantity(ListSum.listSum(Lists.transform(skusToCreates, ItemsToCreate::getStockQuantity)));


                if (!Arguments.isNullOrEmpty(itemSellAttributesAllList)) {
                    List<ItemAttributesDto> newItemSellAttributesAllList = Lists.newArrayList();
                    Set<ItemAttributesDto> sellAttributesSet = Sets.newHashSet();
                    sellAttributesSet.addAll(itemSellAttributesAllList);
                    newItemSellAttributesAllList.addAll(sellAttributesSet);

                    Map<String, String> sellAttrsMap = Maps.newHashMap();
                    for (ItemAttributesDto itemAttributesDto : newItemSellAttributesAllList) {
                        if (sellAttrsMap.containsKey(itemAttributesDto.getAttrsKey())) {
                            sellAttrsMap.put(itemAttributesDto.getAttrsKey(), sellAttrsMap.get(itemAttributesDto.getAttrsKey()) + "," + itemAttributesDto.getAttrsValue());
                        } else {
                            sellAttrsMap.put(itemAttributesDto.getAttrsKey(), itemAttributesDto.getAttrsValue());
                        }
                    }
                    toCreate.setSellAttrs(sellAttrsMap);
                }
                if (!Arguments.isNullOrEmpty(itemNormalAttributesAllList)) {
                    Set<ItemAttributesDto> normalAttributesSet = Sets.newHashSet();
                    List<ItemAttributesDto> newItemNormalAttributesAllList = Lists.newArrayList();
                    normalAttributesSet.addAll(itemNormalAttributesAllList);
                    newItemNormalAttributesAllList.addAll(normalAttributesSet);

                    Map<String, String> normalAttrsMap = Maps.newHashMap();
                    for (ItemAttributesDto itemAttributesDto : newItemNormalAttributesAllList) {
                        if (normalAttrsMap.containsKey(itemAttributesDto.getAttrsKey())) {
                            normalAttrsMap.put(itemAttributesDto.getAttrsKey(), normalAttrsMap.get(itemAttributesDto.getAttrsKey()) + "," + itemAttributesDto.getAttrsValue());
                        } else {
                            normalAttrsMap.put(itemAttributesDto.getAttrsKey(), itemAttributesDto.getAttrsValue());
                        }
                    }
                    toCreate.setNormalAttrs(normalAttrsMap);
                }

                itemsToCreates.add(toCreate);
            }

            if (Arguments.isNull(type)) {
                type = VegaItemImportType.API.value();
            }

            Long id = uploadToImport(shopId, itemsToCreates, type).getResult();

            return Response.ok(id);
        } catch (Exception e) {
            log.error("import item by api sync failed, shopId={} , data ={}, cause:{}",
                    shopId, submittedItemImportDto.getBody(), Throwables.getStackTraceAsString(e));
            throw new JsonResponseException(Throwables.getStackTraceAsString(e));
        }
    }


    @Override
    public Response<Boolean> updateItemsByApi(Long shopId, String outIdTag, SubmittedItemImportDto submittedItemImportDto) {
        List<ItemCreateApiDto> itemCreatesByApi = submittedItemImportDto.getBody();
        try {
            List<ItemsToCreate> itemsToUpdates = Lists.newArrayList();

            for (ItemCreateApiDto itemCreateApiDto : itemCreatesByApi) {
                ItemsToCreate toUpdate = new ItemsToCreate();

                if (Strings.isNullOrEmpty(itemCreateApiDto.getItemOutId())) {
                    return Response.fail("商品外部ID不能为空");
                }
                toUpdate.setItemCode(outIdTag.concat(itemCreateApiDto.getItemOutId().trim()));
                toUpdate.setUnitMeasure(itemCreateApiDto.getUnitMeasure());
                toUpdate.setName(itemCreateApiDto.getName());
                toUpdate.setBrandCode(itemCreateApiDto.getBrandCode());

                String[] imagesArray = itemCreateApiDto.getImagesArray();
                if (!Arguments.isNull(imagesArray) && imagesArray.length > 1) {
                    toUpdate.setItemImage(imagesArray[0].trim()); // 第一张图片

                    List<Map<String, String>> imagesList = Lists.newArrayList();
                    for (int i = 1; i < imagesArray.length; i++) {
                        Map<String, String> imagesMap = Maps.newHashMap();
                        imagesMap.put("url", imagesArray[i]);
                        imagesList.add(imagesMap);
                    }
                    toUpdate.setImagesJson(JsonMapper.JSON_NON_EMPTY_MAPPER.toJson(imagesList));
                }

                toUpdate.setAssistantUnit(itemCreateApiDto.getAssistantUnit());
                toUpdate.setTrademarkName(itemCreateApiDto.getTrademarkName());
                toUpdate.setItemDetail(itemCreateApiDto.getItemDetail());
                toUpdate.setSelfPlatformLink(itemCreateApiDto.getItemOutUrl());


                List<ItemsToCreate> skusToCreates = Lists.newArrayList();
                for (SkuCreateApiDto skuCreateApiDto : itemCreateApiDto.getChildren()) {
                    ItemsToCreate skuToCreate = new ItemsToCreate();

                    if (Strings.isNullOrEmpty(skuCreateApiDto.getSkuOutId())) {
                        return Response.fail("商品SKU外部ID不能为空");
                    }

                    skuToCreate.setSkuOuterId(outIdTag.concat(skuCreateApiDto.getSkuOutId().trim()));

                    if (Arguments.notNull(skuCreateApiDto.getItemPrice())) {
                        skuToCreate.setItemPrice(Integer.parseInt(skuCreateApiDto.getItemPrice()));
                    }
                    if (Arguments.notNull(skuCreateApiDto.getStockQuantity())) {
                        skuToCreate.setStockQuantity(Integer.parseInt(skuCreateApiDto.getStockQuantity()));
                    }
                    if (Arguments.notNull(skuCreateApiDto.getUnitAmount())) {
                        skuToCreate.setUnitAmount(Integer.parseInt(skuCreateApiDto.getUnitAmount()));
                    }

                    // 以下四项值取item中的数据
                    skuToCreate.setName(itemCreateApiDto.getName());
                    skuToCreate.setBrandCode(itemCreateApiDto.getBrandCode());
                    skuToCreate.setAssistantUnit(itemCreateApiDto.getAssistantUnit());
                    skuToCreate.setTrademarkName(itemCreateApiDto.getTrademarkName());

                    skusToCreates.add(skuToCreate);
                }

                toUpdate.setChildren(skusToCreates);

                itemsToUpdates.add(toUpdate);
            }

            return bulkUpdateItem(shopId, itemsToUpdates);
        } catch (Exception e) {
            log.error("import item by api update failed, shopId={} , data ={}, cause:{}",
                    shopId, submittedItemImportDto.getBody(), Throwables.getStackTraceAsString(e));
            throw new JsonResponseException(Throwables.getStackTraceAsString(e));
        }
    }

    @Override
    public Response<Boolean> deleteItemsByApi(Long shopId, List<Long> itemIds, List<Long> skuIds) {
        try {
            if (vegaItemManager.batchDeleteItemsAndSkusByShopId(shopId, itemIds, skuIds)) {
                return Response.ok(Boolean.TRUE);
            }
            return Response.fail("商品删除失败");
        } catch (Exception e) {
            log.error("import item by api delete failed, shopId={} , itemIds = {}, skuIds = {}, cause:{}",
                    shopId, itemIds, skuIds, Throwables.getStackTraceAsString(e));
            throw new JsonResponseException(Throwables.getStackTraceAsString(e));
        }
    }


    @Override
    public Response<Long> uploadToImport(Long shopId, List<ItemsToCreate> items, Integer type) {
        try {
            VegaItemUploaded data = new VegaItemUploaded();
            data.setShopId(shopId);
            data.setItems(items);

            ItemImport entity = new ItemImport();
            entity.setShopId(shopId);
            entity.setStatus(0);
            entity.setItemUploadedJson(JsonMapper.nonEmptyMapper().toJson(data));

            itemImportDao.create(entity);
            itemImportExecutor.doImport(this, entity.getId(), type);
            return Response.ok(entity.getId());
        } catch (Exception e) {
            log.error("upload to import failed, shopId={}, products={}, cause:{}",
                    shopId, items, Throwables.getStackTraceAsString(e));
            return Response.fail("product.upload.to.import.fail");
        }
    }

    @Override
    public Response<Boolean> doImportItem(Long handlerId, Integer type) {
        try {
            ItemImport handler = itemImportDao.findById(handlerId);
            if (handler == null) {
                log.warn("product import handler not found, id={}", handlerId);
                return Response.ok(Boolean.FALSE);
            }
            if (!Objects.equals(handler.getStatus(), ItemImport.Status.INIT.value())) {
                log.warn("import is already handled, id={}", handlerId);
                return Response.ok(Boolean.FALSE);
            }
            VegaItemUploaded data = JsonMapper.nonEmptyMapper().fromJson(handler.getItemUploadedJson(), VegaItemUploaded.class);
            Response<Boolean> itemResp = bulkCreateItem(data.getShopId(), data.getItems(), type);
            if (!itemResp.isSuccess()) {
                log.warn("bulk create product failed, error={}", itemResp.getError());
                ItemImport failUpdate = new ItemImport();
                failUpdate.setId(handlerId);
                failUpdate.setStatus(ItemImport.Status.FAIL.value());
                failUpdate.setErrorResult(itemResp.getError());
                itemImportDao.update(failUpdate);
                return Response.fail(itemResp.getError());
            } else {
                ItemImport successUpdate = new ItemImport();
                successUpdate.setId(handlerId);
                successUpdate.setStatus(ItemImport.Status.SUCCESS.value());
                itemImportDao.update(successUpdate);
            }
            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("do import product failed, handlerId={}, cause:{}",
                    handlerId, Throwables.getStackTraceAsString(e));
            return Response.fail("item.import.fail");
        }
    }

    @Override
    public Response<Boolean> bulkCreateItem(long shopId, List<ItemsToCreate> items, Integer type) {
        try {

            Shop shop = shopCacher.findShopById(shopId);
            if (shop == null) {
                log.error("shop not exist, shopId:{}", shopId);
                throw new ServiceException("shop.not.exist");
            }
            List<FullItem> fullItems = Lists.newArrayList();
            for (ItemsToCreate itemsToCreate : items) {
                FullItem fullItem = new FullItem();

                ItemDetail itemDetail = new ItemDetail();
                if (Arguments.notNull(itemsToCreate.getItemDetail())) {
                    itemDetail.setDetail(itemsToCreate.getItemDetail());
                }
                if (Arguments.notNull(itemsToCreate.getImagesJson())) {
                    itemDetail.setImagesJson(itemsToCreate.getImagesJson());
                }
                fullItem.setItemDetail(itemDetail);

                List<Sku> skus = Lists.newArrayList();
                for (ItemsToCreate child : itemsToCreate.getChildren()) {
                    Sku sku = new Sku();

                    sku.setShopId(shop.getId());
                    sku.setStatus(DefaultItemStatus.ITEM_WAIT_AUDIT);
                    if (Objects.equals(type, VegaItemImportType.TOOL_MALL_API.value())) {
                        if (Objects.equals(child.getToolMallIsMarketable(), ToolMallItemImportStatus.ToolMallItemStatus.NO_SHELF)) {
                            // 商品下架
                            sku.setStatus(DefaultItemStatus.ITEM_FREEZE);
                        }
                    }
                    sku.setPrice(child.getItemPrice());
                    sku.setStockType(0);
                    sku.setStockQuantity(child.getStockQuantity());
                    sku.setOuterSkuId(child.getSkuOuterId());
                    sku.setSkuCode(child.getSkuOuterId());
                    sku.setName(child.getName());
                    Map<String, String> childExtra = Maps.newHashMap();
                    childExtra.put("unitQuantity", child.getUnitAmount().toString());
                    childExtra.put("brandCode", child.getBrandCode());
                    childExtra.put("otherNo", child.getOtherNo());
                    childExtra.put("assistantUnit", child.getAssistantUnit());
                    childExtra.put("trademarkName", child.getTrademarkName());
                    sku.setExtra(childExtra);
                    if (!Arguments.isNull(child.getSellAttrs())) {
                        List<SkuAttribute> skuAttrs = Lists.newArrayList();
                        for (String key : child.getSellAttrs().keySet()) {
                            SkuAttribute skuAttr = new SkuAttribute();
                            skuAttr.setAttrKey(key);
                            skuAttr.setAttrVal(child.getSellAttrs().get(key));
                            skuAttrs.add(skuAttr);
                        }
                        sku.setAttrs(skuAttrs);
                    }

                    skus.add(sku);

                }
                if (CollectionUtils.isEmpty(skus)) {
                    log.error("item have no sku, shopId:{}, items:{}", shopId, items);
                    throw new ServiceException("item.have.no.sku");
                }
                List<Integer> skuPrices = Lists.transform(skus, Sku::getPrice);

                fullItem.setSkus(skus);

                if (Objects.equals(type, VegaItemImportType.API.value())) {
                    fullItem.setGroupedSkuAttributes(analysisSkuAttrsByImportApi(itemsToCreate));
                    List<GroupedOtherAttribute> groupedOtherAttributes = analysisOtherAttrsByImportApi(itemsToCreate);
                    fullItem.setGroupedOtherAttributes(CollectionUtils.isEmpty(groupedOtherAttributes) ? null : groupedOtherAttributes);
                } else {
                    fullItem.setGroupedSkuAttributes(analysisSkuAttrs(itemsToCreate));
                    List<GroupedOtherAttribute> groupedOtherAttributes = analysisOtherAttrs(itemsToCreate);
                    fullItem.setGroupedOtherAttributes(CollectionUtils.isEmpty(groupedOtherAttributes) ? null : groupedOtherAttributes);
                }


                Item item = new Item();
                item.setItemCode(itemsToCreate.getItemCode());
                item.setCategoryId(itemsToCreate.getCategoryId());
                item.setShopId(shop.getId());
                item.setShopName(shop.getName());
                item.setBrandId(itemsToCreate.getBrandId());
                item.setBrandName(itemsToCreate.getBrandName());
                item.setName(itemsToCreate.getName());
                item.setStockType(0);
                item.setLowPrice(Collections.min(skuPrices));
                item.setHighPrice(Collections.max(skuPrices));
                item.setStockQuantity(itemsToCreate.getStockQuantity());
                item.setSaleQuantity(0);
                item.setStatus(DefaultItemStatus.ITEM_WAIT_AUDIT);
                item.setOnShelfAt(new Date());
                item.setType(1);
                item.setMainImage(itemsToCreate.getItemImage());
                item.setReduceStockType(1);
                Map<String, String> extra = Maps.newHashMap();
                extra.put("unit", itemsToCreate.getUnitMeasure());
                extra.put("unitQuantity", itemsToCreate.getUnitAmount().toString());
                extra.put("itemOuterId", itemsToCreate.getItemOuterId());
                extra.put("brandCode", itemsToCreate.getBrandCode());
                extra.put("assistantUnit", itemsToCreate.getAssistantUnit());
                extra.put("trademarkName", itemsToCreate.getTrademarkName());
                extra.put("selfPlatformLink", itemsToCreate.getSelfPlatformLink());
                item.setExtra(extra);
                ItemAttribute itemAttribute = new ItemAttribute();
                itemAttribute.setOtherAttrs(fullItem.getGroupedOtherAttributes());
                itemAttribute.setSkuAttrs(fullItem.getGroupedSkuAttributes());
                String itemInfoMd5 = Digestors.itemDigest(item, fullItem.getItemDetail(), itemAttribute);
                item.setItemInfoMd5(itemInfoMd5);

                fullItem.setItem(item);

                ItemDeliveryFee itemDeliveryFee = new ItemDeliveryFee();
                itemDeliveryFee.setDeliveryFeeTemplateId(itemsToCreate.getDeliveryFeeTemplateId());
                fullItem.setItemDeliveryFee(itemDeliveryFee);

                fullItems.add(fullItem);
            }

            if (Objects.equals(type, VegaItemImportType.TOOL_MALL_API.value())) {
                if (vegaItemManager.toolMallItemBatchCreateAndUpdateOrDelete(fullItems)) {
                    return Response.ok(Boolean.TRUE);
                }
            } else {
                if (vegaItemManager.bulkCreateItem(fullItems)) {
                    return Response.ok(Boolean.TRUE);
                }
            }
            return Response.fail("bulk.create.item.fail");

        } catch (Exception e) {
            log.error("bulk create item fail, shopId:{}, items:{}, cause:{}",
                    shopId, items, Throwables.getStackTraceAsString(e));
            return Response.fail("bulk.create.item.fail");
        }
    }


    private Response<Boolean> bulkUpdateItem(Long shopId, List<ItemsToCreate> items) {
        try {

            Shop shop = shopCacher.findShopById(shopId);
            if (shop == null) {
                log.error("shop not exist, shopId:{}", shopId);
                throw new ServiceException("shop.not.exist");
            }

            List<FullItem> fullItems = Lists.newArrayList();
            for (ItemsToCreate itemsToCreate : items) {

                List<Item> itemList = itemDao.findByShopIdAndCode(shopId, itemsToCreate.getItemCode());
                if (Arguments.isNullOrEmpty(itemList)) {
                    log.error("item not exist, shopId:{}, itemCode:{}", shopId, itemsToCreate.getItemCode());
                    return Response.fail("修改商品信息未找到");
                }

                FullItem fullItem = new FullItem();

                ItemDetail itemDetail = new ItemDetail();
                itemDetail.setItemId(itemList.get(0).getId());
                ItemDetail itemExistDetail = itemDetailDao.findByItemId(itemList.get(0).getId());
                if (Arguments.notNull(itemsToCreate.getItemDetail())) {
                    itemDetail.setDetail(itemsToCreate.getItemDetail());
                } else {
                    if (Arguments.notNull(itemExistDetail)) {
                        itemDetail.setDetail(itemExistDetail.getDetail());
                    }
                }

                if (Arguments.notNull(itemsToCreate.getImagesJson())) {
                    itemDetail.setImagesJson(itemsToCreate.getImagesJson());
                }
                fullItem.setItemDetail(itemDetail);

                List<Sku> skus = Lists.newArrayList();
                Boolean isUpdatePrice = Boolean.FALSE;
                Integer itemStockQuantitySum = 0;
                for (ItemsToCreate child : itemsToCreate.getChildren()) {
                    Sku sku = new Sku();

                    List<Sku> skuList = skuDao.findByShopIdAndSkuCode(shopId, child.getSkuOuterId());
                    if (Arguments.isNullOrEmpty(skuList)) {
                        log.error("sku not exist, shopId:{}, skuCode:{}", shopId, child.getSkuOuterId());
                        return Response.fail("修改商品SKU信息未找到");
                    }

                    sku.setItemId(itemList.get(0).getId());
                    sku.setId(skuList.get(0).getId());

                    if (Arguments.notNull(child.getItemPrice()) && Arguments.notEmpty(child.getItemPrice().toString())) {
                        sku.setPrice(child.getItemPrice());
                        sku.setStatus(DefaultItemStatus.ITEM_WAIT_AUDIT);
                        isUpdatePrice = Boolean.TRUE;
                    } else {
                        // 取数据库中的值
                        sku.setPrice(skuList.get(0).getPrice());
                    }

                    if (Arguments.notNull(child.getStockQuantity()) && Arguments.notEmpty(child.getStockQuantity().toString())) {
                        sku.setStockQuantity(child.getStockQuantity());

                        itemStockQuantitySum += child.getStockQuantity();
                    } else {
                        itemStockQuantitySum += skuList.get(0).getStockQuantity();
                    }

                    if (!Strings.isNullOrEmpty(child.getName())) {
                        sku.setName(child.getName());
                    }


                    Map<String, String> childExtra = skuList.get(0).getExtra();
                    if (Arguments.notNull(child.getUnitAmount()) && !Objects.equals(child.getUnitAmount(), 1)) {
                        childExtra.put("unitQuantity", child.getUnitAmount().toString());
                    }
                    if (!Strings.isNullOrEmpty(child.getBrandCode()) && !Objects.equals(child.getBrandCode(), "无")) {
                        childExtra.put("brandCode", child.getBrandCode());
                    }
                    if (!Strings.isNullOrEmpty(child.getAssistantUnit()) && !Objects.equals(child.getAssistantUnit(), "无")) {
                        childExtra.put("assistantUnit", child.getAssistantUnit());
                    }
                    if (!Strings.isNullOrEmpty(child.getTrademarkName()) && !Objects.equals(child.getTrademarkName(), "无")) {
                        childExtra.put("trademarkName", child.getTrademarkName());
                    }
                    if (!childExtra.isEmpty()) {
                        sku.setExtra(childExtra);
                    }

                    if (Objects.equals(skuList.get(0).getStatus(), DefaultItemStatus.ITEM_DELETE)) {
                        // 修改的商品SKU信息之前为删除状态,需要改成待审核
                        sku.setStatus(DefaultItemStatus.ITEM_WAIT_AUDIT);
                    }

                    skus.add(sku);

                }
                if (CollectionUtils.isEmpty(skus)) {
                    log.error("item have no sku, shopId:{}, items:{}", shopId, items);
                    throw new ServiceException("item.have.no.sku");
                }
                List<Integer> skuPrices = Lists.transform(skus, Sku::getPrice);

                fullItem.setSkus(skus);


                Item item = itemList.get(0);

                if (!Strings.isNullOrEmpty(itemsToCreate.getName())) {
                    item.setName(itemsToCreate.getName());
                }

                if (isUpdatePrice) {
                    item.setLowPrice(Collections.min(skuPrices));
                    item.setHighPrice(Collections.max(skuPrices));

                    item.setStatus(DefaultItemStatus.ITEM_WAIT_AUDIT);
                }

                if (itemStockQuantitySum > 0) {
                    item.setStockQuantity(itemStockQuantitySum);
                }


                if (!Strings.isNullOrEmpty(itemsToCreate.getItemImage())) {
                    item.setMainImage(itemsToCreate.getItemImage());
                }
                Map<String, String> extra = itemList.get(0).getExtra();
                if (!Strings.isNullOrEmpty(itemsToCreate.getUnitMeasure())) {
                    extra.put("unit", itemsToCreate.getUnitMeasure());
                }
                if (!Strings.isNullOrEmpty(itemsToCreate.getBrandCode()) && !Objects.equals(itemsToCreate.getBrandCode(), "无")) {
                    extra.put("brandCode", itemsToCreate.getBrandCode());
                }
                if (!Strings.isNullOrEmpty(itemsToCreate.getAssistantUnit()) && !Objects.equals(itemsToCreate.getAssistantUnit(), "无")) {
                    extra.put("assistantUnit", itemsToCreate.getAssistantUnit());
                }
                if (!Strings.isNullOrEmpty(itemsToCreate.getTrademarkName()) && !Objects.equals(itemsToCreate.getTrademarkName(), "无")) {
                    extra.put("trademarkName", itemsToCreate.getTrademarkName());
                }
                if (!Strings.isNullOrEmpty(itemsToCreate.getSelfPlatformLink())) {
                    extra.put("selfPlatformLink", itemsToCreate.getSelfPlatformLink());
                }
                if (!extra.isEmpty()) {
                    item.setExtra(extra);
                }

                ItemAttribute existItemAttribute = itemAttributeDao.findByItemId(itemList.get(0).getId());

                if (!Arguments.isNull(existItemAttribute)) {
                    ItemAttribute itemAttribute = new ItemAttribute();
                    itemAttribute.setOtherAttrs(existItemAttribute.getOtherAttrs());
                    itemAttribute.setSkuAttrs(existItemAttribute.getSkuAttrs());

                    String itemInfoMd5 = Digestors.itemDigest(item, fullItem.getItemDetail(), itemAttribute);
                    item.setItemInfoMd5(itemInfoMd5);
                }

                if (Objects.equals(item.getStatus(), DefaultItemStatus.ITEM_DELETE)) {
                    // 修改的商品信息之前为删除状态,需要改成待审核
                    item.setStatus(DefaultItemStatus.ITEM_WAIT_AUDIT);
                }


                fullItem.setItem(item);

                fullItems.add(fullItem);
            }

            if (vegaItemManager.bulkUpdateItem(fullItems)) {
                return Response.ok(Boolean.TRUE);
            }
            return Response.fail("bulk.update.item.fail");

        } catch (Exception e) {
            log.error("bulk update item fail, shopId:{}, items:{}, cause:{}",
                    shopId, items, Throwables.getStackTraceAsString(e));
            return Response.fail("bulk.update.item.fail");
        }
    }


    private List<GroupedSkuAttribute> analysisSkuAttrs(ItemsToCreate itemsToCreate) {

        //单规格商品
        if (itemsToCreate.getChildren().size() == 1) {
            return Collections.emptyList();
        }

        //多规格商品
        List<GroupedSkuAttribute> groupedSkuAttributes = Lists.newArrayList();

        List<CategoryAttribute> categoryAttributes = categoryAttributeDao.findByCategoryId(itemsToCreate.getCategoryId());

        for (CategoryAttribute categoryAttribute : categoryAttributes) {
            if (Objects.equals(categoryAttribute.getAttrMetas().get(AttributeMetaKey.SKU_CANDIDATE), "true")) {

                GroupedSkuAttribute groupedSkuAttribute = new GroupedSkuAttribute();

                List<SkuAttribute> skuAttributes = Lists.newArrayList();

                for (String value: categoryAttribute.getAttrVals()) {
                    SkuAttribute skuAttribute = new SkuAttribute();
                    skuAttribute.setAttrKey(categoryAttribute.getAttrKey());
                    skuAttribute.setAttrVal(value);
                    skuAttribute.setShowImage(Boolean.FALSE);

                    skuAttributes.add(skuAttribute);
                }

                if (Objects.equals(categoryAttribute.getAttrMetas().get(AttributeMetaKey.USER_DEFINED), "true")) {
                    for (ItemsToCreate child : itemsToCreate.getChildren()) {
                        SkuAttribute skuAttribute = new SkuAttribute();
                        skuAttribute.setAttrKey(categoryAttribute.getAttrKey());
                        skuAttribute.setAttrVal(child.getSellAttrs().get(categoryAttribute.getAttrKey()));
                        skuAttribute.setShowImage(Boolean.FALSE);
                        if (!skuAttributes.contains(skuAttribute)) {
                            skuAttributes.add(skuAttribute);
                        }
                    }
                }

                groupedSkuAttribute.setAttrKey(categoryAttribute.getAttrKey());
                groupedSkuAttribute.setSkuAttributes(skuAttributes);

                groupedSkuAttributes.add(groupedSkuAttribute);

            }
        }

        return groupedSkuAttributes;
    }

    /**
     * API商品导入销售属性组装
     * @param itemsToCreate 封装前数据
     * @return 封装好的数据
     */
    private List<GroupedSkuAttribute> analysisSkuAttrsByImportApi(ItemsToCreate itemsToCreate) throws Exception {
        List<GroupedSkuAttribute> groupedSkuAttributes = Lists.newArrayList();


        Map<String, String> attrs = Maps.newHashMap();
        if (CollectionUtils.isEmpty(itemsToCreate.getSellAttrs())) {
            return Collections.emptyList();
        }
        attrs.putAll(itemsToCreate.getSellAttrs());


        for (String key : attrs.keySet()) {
            List<String> values = Splitters.COMMA.splitToList(attrs.get(key));
            GroupedSkuAttribute groupedSkuAttribute = new GroupedSkuAttribute();
            List<SkuAttribute> skuAttributes = Lists.newArrayList();

            // 判断销售属性是否已经存在
            if (!isExistedCategoryAttribute(itemsToCreate.getCategoryId(), key).getResult()) {
                CategoryAttribute categoryAttribute = new CategoryAttribute();
                categoryAttribute.setCategoryId(itemsToCreate.getCategoryId());
                categoryAttribute.setAttrKey(key);
                categoryAttribute.setGroup("DEFAULT");

                Map<AttributeMetaKey, String> attrMetas = Maps.newHashMap();
                attrMetas.put(AttributeMetaKey.REQUIRED, "true");
                attrMetas.put(AttributeMetaKey.IMPORTANT, "true");
                attrMetas.put(AttributeMetaKey.SKU_CANDIDATE, "true");
                attrMetas.put(AttributeMetaKey.USER_DEFINED, "true");
                attrMetas.put(AttributeMetaKey.SEARCHABLE, "true");
                attrMetas.put(AttributeMetaKey.VALUE_TYPE, "STRING");
                categoryAttribute.setAttrMetas(attrMetas);
                categoryAttribute.setAttrVals(values);

                creatrCategoryAttribute(categoryAttribute);
            }

            for (String str : values) {
                SkuAttribute skuAttribute = new SkuAttribute();
                skuAttribute.setAttrKey(key);
                skuAttribute.setAttrVal(str);

                skuAttributes.add(skuAttribute);
            }
            groupedSkuAttribute.setAttrKey(key);
            groupedSkuAttribute.setSkuAttributes(skuAttributes);

            groupedSkuAttributes.add(groupedSkuAttribute);
        }

        return groupedSkuAttributes;
    }


    /**
     *
     * API商品导入非销售属性组装
     * @param  itemsToCreate 封装前数据
     * @return 封装好的数据
     * @throws Exception
     */
    private List<GroupedOtherAttribute> analysisOtherAttrsByImportApi(ItemsToCreate itemsToCreate) throws Exception {
        List<GroupedOtherAttribute> groupedOtherAttributes = Lists.newArrayList();


        Map<String, String> attrs = Maps.newHashMap();
        if (CollectionUtils.isEmpty(itemsToCreate.getNormalAttrs())) {
            return Collections.emptyList();
        }
        attrs.putAll(itemsToCreate.getNormalAttrs());


        for (String key : attrs.keySet()) {
            List<String> values = Splitters.COMMA.splitToList(attrs.get(key));
            GroupedOtherAttribute groupedOtherAttribute = new GroupedOtherAttribute();
            List<OtherAttribute> otherAttributes = Lists.newArrayList();

            // 判断属性是否已经存在
            if (!isExistedCategoryAttribute(itemsToCreate.getCategoryId(), key).getResult()) {
                CategoryAttribute categoryAttribute = new CategoryAttribute();
                categoryAttribute.setCategoryId(itemsToCreate.getCategoryId());
                categoryAttribute.setAttrKey(key);
                categoryAttribute.setGroup("DEFAULT");

                Map<AttributeMetaKey, String> attrMetas = Maps.newHashMap();
                attrMetas.put(AttributeMetaKey.REQUIRED, "true");
                attrMetas.put(AttributeMetaKey.SKU_CANDIDATE, "false");
                attrMetas.put(AttributeMetaKey.USER_DEFINED, "true");
                attrMetas.put(AttributeMetaKey.IMPORTANT, "true");
                attrMetas.put(AttributeMetaKey.SEARCHABLE, "true");
                attrMetas.put(AttributeMetaKey.VALUE_TYPE, "STRING");
                categoryAttribute.setAttrMetas(attrMetas);
                categoryAttribute.setAttrVals(values);

                creatrCategoryAttribute(categoryAttribute);
            }

            for (String str : values) {
                OtherAttribute otherAttribute = new OtherAttribute();
                otherAttribute.setAttrKey(key);
                otherAttribute.setAttrVal(str);
                otherAttribute.setGroup("DEFAULT");
                otherAttributes.add(otherAttribute);
            }
            groupedOtherAttribute.setGroup("DEFAULT");
            groupedOtherAttribute.setOtherAttributes(otherAttributes);

            groupedOtherAttributes.add(groupedOtherAttribute);
        }

        return groupedOtherAttributes;
    }

    /**
     * 根据类目ID和属性key值判断类目属性是否已经存在
     * @param categoryId  类目Id
     * @param attrKey     attrKey
     * @return 是否
     */
    private Response<Boolean> isExistedCategoryAttribute(Long categoryId, String attrKey) {
        try {
            BackCategory backCategory = backCategoryDao.findById(categoryId);
            if (backCategory == null) {
                log.error("back category(id={}) not found", categoryId);
                return Response.fail("category.not.found");
            } else if (backCategory.getHasChildren()) {
                log.error("back category(id={}) has children, no attribute allowed", categoryId);
                return Response.fail("category.has.children");
            }

            if (!StringUtils.isEmpty(attrKey) && !attrKey.contains(":") && !attrKey.contains("_")) {
                CategoryAttribute existed = this.categoryAttributeDao.findByCategoryIdAndAttrKey(categoryId, attrKey);
                if (existed != null && existed.getStatus() == 1) {
                    log.error("duplicated attrKey({}) under category(id={})", attrKey, categoryId);
                    return Response.ok(Boolean.TRUE);
                }
                return Response.ok(Boolean.FALSE);
            }
            return Response.fail("attrKey.invalid");
        } catch (Exception e) {
            log.error("failed to find categoryId = {}, attrKey = {}, cause:{}", categoryId, attrKey, Throwables.getStackTraceAsString(e));
            return Response.fail("find.attribute.fail");
        }
    }



    /**
     * 创建后台类目属性
     * @param categoryAttribute categoryAttribute
     * @return Id
     */
    private Response<Long> creatrCategoryAttribute(CategoryAttribute categoryAttribute) {
        try {
            categoryAttribute.setStatus(1);
            Long categoryId = categoryAttribute.getCategoryId();

            Integer index = categoryAttributeDao.maxIndexOfCategoryId(categoryId) + 1;
            categoryAttribute.setIndex(index);
            categoryAttributeDao.create(categoryAttribute);

            return Response.ok(categoryAttribute.getId());
        } catch (Exception e) {
            log.error("failed to create {}, cause:{}", categoryAttribute, Throwables.getStackTraceAsString(e));
            return Response.fail("category.attribute.create.fail");
        }
    }

    private List<GroupedOtherAttribute> analysisOtherAttrs(ItemsToCreate itemsToCreate) {

        List<GroupedOtherAttribute> groupedOtherAttributes = Lists.newArrayList();
        GroupedOtherAttribute groupedOtherAttribute = new GroupedOtherAttribute();
        List<OtherAttribute> otherAttributes = Lists.newArrayList();


        Map<String, String> attrs = Maps.newHashMap();
        if (itemsToCreate.getChildren().size() == 1) {
            Map<String, String> sellAttrs = itemsToCreate.getChildren().get(itemsToCreate.getChildren().size() - 1).getSellAttrs();
            if (!CollectionUtils.isEmpty(sellAttrs)) {
                attrs.putAll(sellAttrs);

            }
        }
        if (!CollectionUtils.isEmpty(itemsToCreate.getNormalAttrs())) {
            attrs.putAll(itemsToCreate.getNormalAttrs());

        }

        for (String key : attrs.keySet()) {
            OtherAttribute otherAttribute = new OtherAttribute();
            otherAttribute.setAttrKey(key);
            otherAttribute.setAttrVal(attrs.get(key));
            otherAttribute.setGroup("DEFAULT");
            otherAttributes.add(otherAttribute);
        }

        if (CollectionUtils.isEmpty(otherAttributes)) {
            return Collections.emptyList();
        }
        groupedOtherAttribute.setGroup("DEFAULT");
        groupedOtherAttribute.setOtherAttributes(otherAttributes);


        groupedOtherAttributes.add(groupedOtherAttribute);

        return groupedOtherAttributes;


    }


    private long getCategoryId(UploadHelper.MetaHelper metaHelper) {
        try {
            return metaHelper.getValue("Scope", true, new UploadHelper.ValueProcessor<Long>() {
                @Override
                public Long process(String rawValue) throws ServiceException {
                    List<String> path = Splitter.on('\\').trimResults().splitToList(rawValue);
                    if (path.isEmpty()) {
                        throw new ServiceException("illegal.back.category");
                    }
                    Response<BackCategory> resp = vegaCategoryReadService.findLeafByBackCategoryPath(path);
                    if (!resp.isSuccess()) {
                        throw new ServiceException(resp.getError());
                    }
                    if (resp.getResult() == null || resp.getResult().getId() == null) {
                        throw new ServiceException("find.back.category.fail");
                    }
                    return resp.getResult().getId();
                }
            });
        } catch (Exception e) {
            log.error("get category id fail, cause:{}", e.getMessage());
            throw new ServiceException(e.getMessage());
        }
    }

    private UploadHelper.ValueProcessor<Integer> getTypeProcessor() {
        return new UploadHelper.ValueProcessor<Integer>() {
            @Override
            public Integer process(String rawValue) throws UploadHelper.ValueProcessException {
                if (rawValue.equals("规格")) {
                    return 1;
                }
                if (rawValue.equals("单规格商品") || rawValue.startsWith("单规格")) {
                    return 2;
                }
                return 3;
            }
        };
    }

    private Map<String, String> getCustomAttributes(UploadHelper.LineHelper lineHelper, Boolean sellingRequired, Set<String> selling) {
        Map<String, String> kvs = lineHelper.getKeyValue("custom_", UploadHelper.STRING_VALUE_PROCESSOR);
        Map<String, String> sellAttributes = Maps.newHashMap();
        Map<String, String> otherAttributes = Maps.newHashMap();

        for (String key : kvs.keySet()) {
            if (selling.contains("custom_" + key)) {
                sellAttributes.put(key, kvs.get(key));
            }else {
                otherAttributes.put(key, kvs.get(key));
            }
        }
        if (sellingRequired) {
            return sellAttributes;
        }
        return otherAttributes;

    }

}
