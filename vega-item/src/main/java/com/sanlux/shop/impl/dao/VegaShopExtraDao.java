package com.sanlux.shop.impl.dao;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.sanlux.shop.model.VegaShopExtra;
import io.terminus.common.model.Paging;
import io.terminus.common.mysql.dao.MyBatisDao;
import org.springframework.stereotype.Repository;

import java.util.Collections;
import java.util.List;
import java.util.Map;

import static io.terminus.common.utils.Arguments.isEmpty;

/**
 * Code generated by terminus code gen
 * Desc: 三力士 shop extra 表Dao类
 * Date: 2016-08-17
 */
@Repository
public class VegaShopExtraDao extends MyBatisDao<VegaShopExtra> {

    public VegaShopExtra findByShopId(Long shopId) {
        return getSqlSession().selectOne(sqlId("findByShopId"), shopId);
    }

    public List<VegaShopExtra> findByShopIds(List<Long> shopIds){
        if (isEmpty(shopIds)) {
            return Collections.emptyList();
        }
        return sqlSession.selectList(sqlId("findByShopIds"), shopIds);
    }
    public List<VegaShopExtra> findFirstDealerByShopIds(List<Long> shopIds){
        if (isEmpty(shopIds)) {
            return Collections.emptyList();
        }
        return sqlSession.selectList(sqlId("findFirstDealerByShopIds"), shopIds);
    }

    public VegaShopExtra findByUserId(Long userId) {
        return getSqlSession().selectOne(sqlId("findByUserId"), userId);
    }

    public Boolean updateByShopId(VegaShopExtra vegaShopExtra) {
        return getSqlSession().update(sqlId("updateByShopId"), vegaShopExtra) == 1;
    }

    /**
     * 根据店铺ID修改shop extra状态及上级店铺信息
     * @param vegaShopExtra shop extra
     * @return 修改结果
     */
    public Boolean updateStatusByShopId(VegaShopExtra vegaShopExtra) {
        return getSqlSession().update(sqlId("updateStatusByShopId"), vegaShopExtra) == 1;
    }

    /**
     * 根据Pid查询所有下级店铺信息
     * @param pid 店铺ID
     * @return 下级店铺信息
     */
    public List<VegaShopExtra> listAllShopByPid(Long pid) {
        return getSqlSession().selectList(sqlId("listAllShopByPid"), pid);
    }

    public void updateStatus(Long shopId, Integer status) {
        getSqlSession().update(sqlId("updateStatus"), ImmutableMap.of(
                "shopId", shopId, "shopStatus", status
        ));
    }

    /**
     * 根据店铺名称和店铺类型查询店铺信息
     * @param name 店铺名称
     * @param type 店铺类型
     * @return 店铺信息
     */
    public List<VegaShopExtra> listShopByNameAndType(String name, Integer type) {
        return getSqlSession().selectList(sqlId("listShopByNameAndType"), ImmutableMap.of(
                "name", name, "type", type
        ));
    }

    /**
     * 根据店铺ID和店铺名称查询下级店铺信息
     * @param parentShopId 店铺ID
     * @param chileShopName 下级店铺名称
     * @return 店铺信息
     */
    public List<VegaShopExtra> listShopByPidAndName(Long parentShopId, String chileShopName) {
        return getSqlSession().selectList(sqlId("listShopByPidAndName"), ImmutableMap.of(
                "pid", parentShopId, "name", chileShopName
        ));
    }

    /**
     * 修改信用额度状态(是否可用)
     * @param shopId 店铺ID
     * @param isAvailable 是否可用, true 可用, false 不可用
     * @return 修改结果
     */
    public Boolean changeCreditStatusByShopId(Long shopId, Boolean isAvailable) {
        return getSqlSession().update(sqlId("changeCreditStatusByShopId"), ImmutableMap.of(
                "shopId", shopId, "isAvailable", isAvailable
        )) == 1;
    }

    /**
     * 修改倍率下限
     * @param shopId 店铺ID
     * @param discountLowerLimit 下限值
     * @return 修改结果
     */
    public Boolean changeDiscountLowerLimit(Long shopId, Integer discountLowerLimit) {
        return getSqlSession().update(sqlId("changeDiscountLowerLimit"), ImmutableMap.of(
                "shopId", shopId, "discountLowerLimit", discountLowerLimit
        )) == 1;
    }

    /**
     * 批量冻结店铺信用额度
     * @param shopIds 店铺IDs
     * @return 操作结果
     */
    public Boolean batchFrozeShopCredit(List<Long> shopIds) {
        return getSqlSession().update(sqlId("batchFrozeShopCredit"), shopIds) == shopIds.size();
    }

    /**
     * 根据店铺名称和店铺类型查询店铺信息
     * @return 店铺信息
     */
    public List<Long> listSupplierIds() {
        return getSqlSession().selectList(sqlId("listSupplierIds"));
    }

    public Paging<Long> pagingIds(Integer offset, Integer limit) {
        Map<String, Object> criteria = Maps.newHashMap();
        Long total = getSqlSession().selectOne(sqlId("count"), criteria);
        if(total <= 0L) {
            return Paging.empty();
        } else {
            criteria.put("offset", offset);
            criteria.put("limit", limit);
            List<Long> data = getSqlSession().selectList(sqlId("pagingIds"), criteria);
            return new Paging<>(total, data);
        }
    }

    public List<VegaShopExtra> suggestionByName(String name) {
        return getSqlSession().selectList(sqlId("suggestionByName"), name);
    }

    public Long countSecondDealerApproval (Integer shopType,Integer shopStatus) {
        return getSqlSession().selectOne(sqlId("countNew"),
                ImmutableMap.of("shopType",shopType,"shopStatus",shopStatus));
    }
}
