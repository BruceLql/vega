package com.sanlux.shop.impl.dao;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.sanlux.shop.model.CreditAlterResume;
import io.terminus.common.model.Paging;
import io.terminus.common.mysql.dao.MyBatisDao;
import io.terminus.common.utils.Constants;
import org.springframework.stereotype.Repository;

import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: 经销商信用额度变更履历Dao类
 * Date: 2016-08-11
 */
@Repository
public class CreditAlterResumeDao extends MyBatisDao<CreditAlterResume> {

    public List<CreditAlterResume> findByDealerId(Long shopId) {
        return getSqlSession().selectList(sqlId(""), shopId);
    }

    public Integer deleteByShopId(Long dealerId) {
        return getSqlSession().delete(sqlId("deleteByShopId"), dealerId);
    }

    /**
     * 修改履历状态
     * @param resumeId id
     * @param isPaymentComplete 是否已全部还款
     * @return 修改结果
     */
    public Boolean changeStatusById(Long resumeId, Boolean isPaymentComplete) {
        return getSqlSession().update(sqlId("changeStatusById"), ImmutableMap.of(
               "id", resumeId, "isPaymentComplete", isPaymentComplete
        )) == 1;
    }

    /**
     * 通过交易流水号查询信息
     * @param tradeNo 交易流水号
     * @return 信息
     */
    public CreditAlterResume findByTradeNo(String tradeNo) {
        return getSqlSession().selectOne(sqlId("findByTradeNo"), tradeNo);
    }

    /**
     * 通过第三方交易流水号查询信息
     * @param paymentCode 第三方交易流水号
     * @return 信息
     */
    public CreditAlterResume findByPaymentCode(String paymentCode) {
        return getSqlSession().selectOne(sqlId("findByPaymentCode"), paymentCode);
    }

    /**
     * 查询所有在应还款日期待还款的履历信息
     * @param shouldRepaymentDate 需还款日期
     * @return 履历信息
     */
    public List<CreditAlterResume> listShouldRepaymentShops(Date shouldRepaymentDate) {
        return getSqlSession().selectList(sqlId("listShouldRepaymentShops"), ImmutableMap.of(
                "date", shouldRepaymentDate
        ));
    }

    public CreditAlterResume findByRefundNo(String refundNo) {
        return getSqlSession().selectOne(sqlId("findByRefundNo"), refundNo);
    }

    public CreditAlterResume findByRefundCode(String refundCode) {
        return getSqlSession().selectOne(sqlId("findByRefundCode"), refundCode);
    }


    public Paging<CreditAlterResume> pagingDistinctShopID(Integer offset, Integer limit, Map<String, Object> criteria) {
        if (criteria == null) {    //如果查询条件为空
            criteria = Maps.newHashMap();
        }
        Long total = getSqlSession().selectOne(sqlId("countRepayment"), criteria);
        if (total <= 0){
            return new Paging<>(0L, Collections.<CreditAlterResume>emptyList());
        }
        criteria.put(Constants.VAR_OFFSET, offset);
        criteria.put(Constants.VAR_LIMIT, limit);
        List<CreditAlterResume> datas = getSqlSession().selectList(sqlId("pagingDistinctShopID"), criteria);
        return new Paging<>(total, datas);
    }
    /**
     * 获取经销商待还款待审核数量
     */
    public Long countRepayment () {
        return getSqlSession().selectOne(sqlId("countRepayment"));
    }

    /**
     * 获取用户未完成信用额度还款数量
     *
     * @param userId 用户Id
     * @return 返回数量
     */
    public Long getWaitRepaymentCountByUserId(Long userId) {
        return getSqlSession().selectOne(sqlId("count"), ImmutableMap.of("userId", userId, "isPaymentComplete", Boolean.FALSE));
    }

}
