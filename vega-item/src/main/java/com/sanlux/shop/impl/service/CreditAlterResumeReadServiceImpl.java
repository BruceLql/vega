package com.sanlux.shop.impl.service;

import com.google.common.base.Throwables;
import com.google.common.collect.Maps;
import com.sanlux.common.constants.DefaultId;
import com.sanlux.common.constants.SystemConstant;
import com.sanlux.common.helper.ShopHelper;
import com.sanlux.shop.dto.CreditAlterResumeDto;
import com.sanlux.shop.enums.CreditAlterType;
import com.sanlux.shop.impl.dao.CreditAlterResumeDao;
import com.sanlux.shop.impl.dao.VegaShopExtraDao;
import com.sanlux.shop.model.CreditAlterResume;
import com.sanlux.shop.service.CreditAlterResumeReadService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.PageInfo;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Arguments;
import io.terminus.parana.shop.impl.dao.ShopDao;
import io.terminus.parana.shop.model.Shop;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: 经销商信用额度变更履历读服务实现类
 * Date: 2016-08-11
 */
@Slf4j
@Service
@RpcProvider
public class CreditAlterResumeReadServiceImpl implements CreditAlterResumeReadService {

    private final CreditAlterResumeDao creditAlterResumeDao;
    private final VegaShopExtraDao vegaShopExtraDao;
    private final ShopDao shopDao;

    @Autowired
    public CreditAlterResumeReadServiceImpl(CreditAlterResumeDao creditAlterResumeDao,
                                            VegaShopExtraDao vegaShopExtraDao,
                                            ShopDao shopDao) {
        this.creditAlterResumeDao = creditAlterResumeDao;
        this.vegaShopExtraDao = vegaShopExtraDao;
        this.shopDao = shopDao;
    }

    @Override
    public Response<CreditAlterResume> findById(Long creditAlterResumeId) {
        try {
            return Response.ok(creditAlterResumeDao.findById(creditAlterResumeId));
        } catch (Exception e) {
            log.error("find creditAlterResume by id failed, creditAlterResumeId:{}, cause:{}", creditAlterResumeId, Throwables.getStackTraceAsString(e));
            return Response.fail("credit.alter.resume.find.fail");
        }
    }

    @Override
    public Response<Paging<CreditAlterResume>> findByShopId(Long shopId, Integer pageNo, Integer pageSize) {
        try {
            Map<String, Object> params = new HashMap<>();
            PageInfo pageInfo = new PageInfo(pageNo,pageSize);
            params.putAll(pageInfo.toMap());
            params.put("shopId", shopId);
            return Response.ok(creditAlterResumeDao.paging(params));
        } catch (Exception e) {
            log.error("find creditAlterResume by shopId failed, shopId:{}, cause:{}", shopId, Throwables.getStackTraceAsString(e));
            return Response.fail("credit.alter.resume.find.fail");
        }
    }

    @Override
    public Response<Paging<CreditAlterResume>> paging(Integer pageNo, Integer pageSize, Map<String, Object> criteria) {
        try {
            PageInfo pageInfo = new PageInfo(pageNo, pageSize);
            return Response.ok(creditAlterResumeDao.paging(pageInfo.getOffset(), pageInfo.getLimit(), criteria));
        }catch (Exception e) {
            log.error("failed to paging credit alter resume by criteria = ({}), cause : {}",
                    criteria, Throwables.getStackTraceAsString(e));
            return Response.fail("credit.alter.resume.paging.failed");
        }
    }

    @Override
    public Response<Paging<CreditAlterResume>> pagingDistinctShopID(Integer pageNo, Integer pageSize, Map<String, Object> criteria) {
        try {
            PageInfo pageInfo = new PageInfo(pageNo, pageSize);
            return Response.ok(creditAlterResumeDao.pagingDistinctShopID(pageInfo.getOffset(), pageInfo.getLimit(), criteria));
        }catch (Exception e) {
            log.error("failed to paging distinct by ShopID credit alter resume by criteria = ({}), cause : {}",
                    criteria, Throwables.getStackTraceAsString(e));
            return Response.fail("credit.alter.resume.paging.failed");
        }
    }

    @Override
    public Response<CreditAlterResume> findByTradeNo(String tradeNo) {
        try{
            return Response.ok(creditAlterResumeDao.findByTradeNo(tradeNo));
        }catch (Exception e) {
            log.error("failed to find credit alter resume by tradeNo = ({}), cause: {}",
                    tradeNo, Throwables.getStackTraceAsString(e));
            return Response.fail("credit.alter.resume.find.failed");
        }
    }

    @Override
    public Response<CreditAlterResume> findByPaymentCode(String paymentCode) {
        try{
            return Response.ok(creditAlterResumeDao.findByPaymentCode(paymentCode));
        }catch (Exception e) {
            log.error("failed to find credit alter resume by paymentCode = ({}), cause: {}",
                    paymentCode, Throwables.getStackTraceAsString(e));
            return Response.fail("credit.alter.resume.find.failed");
        }
    }

    @Override
    public Response<CreditAlterResume> findByRefundNo(String refundNo) {
        try{
            return Response.ok(creditAlterResumeDao.findByRefundNo(refundNo));
        }catch (Exception e) {
            log.error("failed to find credit alter resume by refundNo = ({}), cause: {}",
                    refundNo, Throwables.getStackTraceAsString(e));
            return Response.fail("credit.alter.resume.find.failed");
        }
    }

    @Override
    public Response<CreditAlterResume> findByRefundCode(String refundCode) {
        try{
            return Response.ok(creditAlterResumeDao.findByRefundCode(refundCode));
        }catch (Exception e) {
            log.error("failed to find credit alter resume by refundCode = ({}), cause: {}",
                    refundCode, Throwables.getStackTraceAsString(e));
            return Response.fail("credit.alter.resume.find.failed");
        }
    }

    @Override
    public Response<CreditAlterResumeDto> listMonthlyAlterResumeByShopIdOrUserId(Long shopId,
                                                                         Long userId,
                                                                         Integer pageNo,
                                                                         Integer pageSize,
                                                                         Date startAt,
                                                                         Date endAt,
                                                                         Integer status) {
        try {
            Map<String, Object> criteria = Maps.newHashMap();
            if (!Arguments.isNull(shopId)) {
                criteria.put("shopId", shopId);
            } else {
                criteria.put("userId", userId);
            }
            criteria.put("startAt", startAt);
            criteria.put("endAt", endAt);
            criteria.put("alterType", CreditAlterType.PERSONAL_CONSUME.value());
            if (status != null) {
                criteria.put("alterStatus", status);
            }
            Shop shop = shopDao.findById(DefaultId.PLATFROM_SHOP_ID);
            if (shop == null) {
                log.error("failed to find credit alter resume by shopId = ({}), cause shop is not exists.", shopId);
                return Response.fail("shop.is.not.exist");
            }

            Long totalDebt = 0L; // 总欠款金额
            Integer interest = Integer.valueOf(shop.getTags().get(SystemConstant.CREDIT_INTEREST));
            PageInfo pageInfo = new PageInfo(pageNo, pageSize);
            Paging<CreditAlterResume> paging = creditAlterResumeDao
                    .paging(pageInfo.getOffset(), pageInfo.getLimit(), criteria);
            for (CreditAlterResume resume : paging.getData()) {
                // 已付款完成, 不记录
                if (resume.getIsPaymentComplete()) {
                    continue;
                }
                totalDebt += resume.getRemainPayment();

                Long fineAmount = resume.getFineAmount();
                // 如果没有罚息则另外计算, 有则表示已经设置过罚息
                if (fineAmount == null || fineAmount == 0) {
                    // 计算罚息 (剩余未还款金额 * 天数 * 利息比例(eg : 5/10000 万分之五))
                    Long remain = resume.getRemainPayment();
                    Date shouldPayCompleteDate = resume.getShouldRepaymentDate();
                    fineAmount = ShopHelper.calculateFineAmount(remain, shouldPayCompleteDate, new Date(), interest);
                    resume.setFineAmount(fineAmount);
                }
            }
            CreditAlterResumeDto resumeDto = new CreditAlterResumeDto();
            resumeDto.setResumePaging(paging);
            resumeDto.setTotalDebt(totalDebt);
            resumeDto.setCreditInterest(interest);
            resumeDto.setFineRate(SystemConstant.FINE_RATE);

            return Response.ok(resumeDto);
        }catch (Exception e) {
            if (!Arguments.isNull(shopId)) {
                log.error("failed to find credit alter resume by  shopId = ({}), date between ({}), and ({})," +
                        " cause : {}", shopId, startAt, endAt, Throwables.getStackTraceAsString(e));
            } else {
                log.error("failed to find credit alter resume by  userId = ({}), date between ({}), and ({})," +
                        " cause : {}", userId, startAt, endAt, Throwables.getStackTraceAsString(e));
            }
            return Response.fail("credit.resume.find.failed");
        }
    }

    @Override
    public Response<List<CreditAlterResume>> listShouldRepaymentShops(Date deadLine) {
        try {
            return Response.ok(creditAlterResumeDao.listShouldRepaymentShops(deadLine));
        }catch (Exception e) {
            log.error("failed to find credit resume by shouleRepaymentDate = [{}], cause : {}",
                    deadLine, Throwables.getStackTraceAsString(e));
            return Response.fail("credit.alter.resume.find.failed");
        }
    }

    @Override
    public Response<Long> countRepayment () {
        try {
            return Response.ok(creditAlterResumeDao.countRepayment());
        } catch (Exception e) {
            log.error("fail to count dealer credit repayment approval, cause:{}", Throwables.getStackTraceAsString(e));
            return Response.fail("count.dealer.credit.repayment.approval.fail");
        }
    }

    @Override
    public Response<Boolean> checkWaitRepaymentCountByUserId (Long userId) {
        try {
            return Response.ok(creditAlterResumeDao.getWaitRepaymentCountByUserId(userId) > 0);
        } catch (Exception e) {
            log.error("fail to count user credit wait repayment by userId = [{}], cause:{}", userId, Throwables.getStackTraceAsString(e));
            return Response.fail("count.user.credit.wait.repayment.fail");
        }
    }

}
