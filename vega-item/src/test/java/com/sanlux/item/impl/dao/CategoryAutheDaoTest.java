package com.sanlux.item.impl.dao;

import com.google.common.base.Optional;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.sanlux.category.impl.dao.CategoryAutheDao;
import com.sanlux.category.model.CategoryAuthe;
import com.sanlux.item.BaseDaoTest;
import io.terminus.common.model.Paging;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.*;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.*;


/**
 * Code generated by terminus code gen
 * Desc: 经销商授权类目Dao 测试类
 * Date: 2016-08-04
 */
public class CategoryAutheDaoTest extends BaseDaoTest {



    @Autowired
    private CategoryAutheDao categoryAutheDao;

    private CategoryAuthe categoryAuthe;

    @Before
    public void init() throws Exception {
        categoryAuthe = make();

        categoryAutheDao.create(categoryAuthe);
        assertNotNull(categoryAuthe.getId());
    }

    @Test
    public void findById() {
        CategoryAuthe categoryAutheExist = categoryAutheDao.findById(categoryAuthe.getId());

        assertNotNull(categoryAutheExist);
    }

    @Test
    public void findByShopId() {
        Optional<CategoryAuthe> categoryAutheOptional = categoryAutheDao.findByShopId(categoryAuthe.getShopId());

        assertTrue(categoryAutheOptional.isPresent());
        assertNotNull(categoryAutheOptional.get());
    }

    @Test
    public void update() {
        categoryAuthe.setShopName("test");
        categoryAutheDao.update(categoryAuthe);

        CategoryAuthe  updated = categoryAutheDao.findById(categoryAuthe.getId());
        assertEquals(updated.getShopName(), "test");
    }

    @Test
    public void updateDiscountLowerLimitByShopId () {
        categoryAutheDao.updateDiscountLowerLimitByShopId(categoryAuthe.getShopId(), 90);
        CategoryAuthe  updated = categoryAutheDao.findById(categoryAuthe.getId());
        assertTrue(updated.getDiscountLowerLimit() == 90);
    }

    @After
    public void delete() {
        categoryAutheDao.delete(categoryAuthe.getId());

        CategoryAuthe deleted = categoryAutheDao.findById(categoryAuthe.getId());
        assertNull(deleted);
    }

    @Test
    public void paging() {
        Map<String, Object> params = new HashMap<>();
        params.put("shopId",100L);
        Paging<CategoryAuthe > categoryAuthePaging = categoryAutheDao.paging(0, 20, params);

        assertThat(categoryAuthePaging.getTotal(), is(1L));
        assertEquals(categoryAuthePaging.getData().get(0).getId(), categoryAuthe.getId());
    }

    private CategoryAuthe make() throws Exception {
        CategoryAuthe categoryAuthe = new CategoryAuthe();

        
        categoryAuthe.setShopId(100L);
        
        categoryAuthe.setShopName("shopName");

        categoryAuthe.setCategoryAuthList(null);

        categoryAuthe.setCategoryDiscountList(null);

        categoryAuthe.setDiscountLowerLimit(100);
        
        categoryAuthe.setCreatedAt(new Date());
        
        categoryAuthe.setUpdatedAt(new Date());
        

        return categoryAuthe;
    }

    @Test
    public void test () {
        List<String> test = Lists.newArrayList();
        test.add("普通带A3023");
        test.add("普通带A3073");
        test.add("普通带A3099");
        test.add("4PK630 EPDM X5");
        test.add("佳速齿式带Li3918*XPC");
        test.add("越洲带E10000");
        test.add("测试商品5");
        Collections.sort(test);
        System.out.print("!!!!!!!!!!!!!!!!!!!");
        System.out.print(test);
        System.out.print("!!!!!!!!!!!!!!!!!!!");


    }

    @Test
    public void demo () {
        String test = "<em>佳速</em>齿式带<em>li39</em>18*xpc";
        String demo = "佳速齿式带Li3918*XPC";
        char[] testChar = test.toCharArray();
        List<String> testStrList = Lists.newArrayList();
        char[] demoChar = demo.toCharArray();
        String result = "";
        for (int testi =0, demoj=0; demoj < demoChar.length;) {
            if (demoChar[demoj] == testChar[testi]) {
                result += demoChar[demoj];
                demoj ++;
                testi ++;
            }else if (demoChar[demoj] + 32 != testChar[testi]) {
                result += testChar[testi];
                testi ++;
            } else {
                result += demoChar[demoj];
                demoj ++;
                testi ++;
            }
        }

        return;

    }


}