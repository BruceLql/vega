package com.sanlux.item.impl.dao;

import com.google.common.collect.ImmutableMap;
import com.sanlux.item.BaseDaoTest;
import com.sanlux.shop.impl.dao.CreditAlterResumeDao;
import com.sanlux.shop.model.CreditAlterResume;
import io.terminus.common.model.Paging;
import org.joda.time.DateTime;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;

/**
 * Code generated by terminus code gen
 * Desc: 经销商信用额度变更履历Dao 测试类
 * Date: 2016-08-11
 */
public class CreditAlterResumeDaoTest extends BaseDaoTest {

    @Autowired
    private CreditAlterResumeDao creditAlterResumeDao;

    private CreditAlterResume creditAlterResume;

    @Before
    public void init() throws Exception {
        creditAlterResume = make();

        creditAlterResumeDao.create(creditAlterResume);
        assertNotNull(creditAlterResume.getId());
    }

    @Test
    public void findById() {
        CreditAlterResume creditAlterResumeExist = creditAlterResumeDao.findById(creditAlterResume.getId());

        assertNotNull(creditAlterResumeExist);
    }

    @Test
    public void update() {
        creditAlterResume.setUpdatedAt(new Date());
        creditAlterResume.setShopName("updatedName");
        creditAlterResumeDao.update(creditAlterResume);

        CreditAlterResume  updated = creditAlterResumeDao.findById(creditAlterResume.getId());
        assertEquals(updated.getShopName(), "updatedName");
    }

    @Test
    public void testFindShouldRepayment() {

        Date date = DateTime.parse(DateTime.now().toString("yyyy-MM-dd")).toDate();
        List<CreditAlterResume> resumeList = creditAlterResumeDao.listShouldRepaymentShops(date);

        assertEquals(resumeList.get(0).getIsPaymentComplete(), false);

        // the following could be ignored
        System.out.println(date);
        resumeList.forEach(alterResume -> {
            System.out.println(alterResume.getShouldRepaymentDate());
        });
    }

    @Test
    public void delete() {
        creditAlterResumeDao.delete(creditAlterResume.getId());

        CreditAlterResume deleted = creditAlterResumeDao.findById(creditAlterResume.getId());
        assertNull(deleted);
    }

    @Test
    public void countRepayment() {
        long countRepayment=creditAlterResumeDao.countRepayment();
        System.out.println("countRepayment====="+countRepayment);
    }

    @Test
    public void paging() {
        Map<String, Object> params = new HashMap<>();
        params.put("id", creditAlterResume.getId());
        Paging<CreditAlterResume > creditAlterResumePaging = creditAlterResumeDao.paging(0, 20, params);

        assertThat(creditAlterResumePaging.getTotal(), is(1L));
        assertEquals(creditAlterResumePaging.getData().get(0).getId(), creditAlterResume.getId());
    }

    @Test
    public void list() {
        List<CreditAlterResume> resumeList = creditAlterResumeDao.list(ImmutableMap.of(
                "startAt", DateTime.parse("2016-08-01").toDate(),
                "endAt", DateTime.parse("2017-09-01").toDate()
        ));
         assertEquals(1, resumeList.size());
    }

    private CreditAlterResume make() throws Exception {
        CreditAlterResume resume = new CreditAlterResume();
        
        resume.setShopId(1L);
        
        resume.setShopName("dealer");
        
        resume.setOperateId(2L);
        
        resume.setOperateName("operateName");
        resume.setTradeNo("no12345");
        resume.setRefundNo("wtf");
        resume.setAlterStatus(0);

        resume.setShouldRepaymentDate(DateTime.parse(DateTime.now().toString("yyyy-MM-dd")).toDate());
//        resume.setShouldRepaymentDate(new Date());
        resume.setActualRepaymentDate(new Date());
        resume.setIsPaymentComplete(false);
        resume.setLastCredit(100L);
        resume.setNewestCredit(200L);
        
        resume.setExtraJson("");
        
        resume.setCreatedAt(new Date());
        
        resume.setUpdatedAt(new Date());

        return resume;
    }

}