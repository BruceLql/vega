package com.sanlux.item.impl.dao;

import com.sanlux.item.BaseDaoTest;
import com.sanlux.item.enums.IntegrationItemStatus;
import com.sanlux.item.model.IntegrationItem;
import io.terminus.common.model.Paging;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;


/**
 * Code generated by terminus code gen
 * Desc: 积分商品表Dao 测试类
 * Date: 2016-11-07
 */
public class IntegrationItemDaoTest extends BaseDaoTest {



    @Autowired
    private IntegrationItemDao integrationItemDao;

    private IntegrationItem integrationItem;

    @Before
    public void init() throws Exception {
        integrationItem = make();

        integrationItemDao.create(integrationItem);
        assertNotNull(integrationItem.getId());
    }

    @Test
    public void findById() {
        IntegrationItem integrationItemExist = integrationItemDao.findById(integrationItem.getId());

        assertNotNull(integrationItemExist);
    }

    @Test
    public void update() {
        // todo
        integrationItem.setUpdatedAt(new Date());
        integrationItemDao.update(integrationItem);

        IntegrationItem  updated = integrationItemDao.findById(integrationItem.getId());
        // todo
        //assertEquals(updated.getHasDisplay(), Boolean.TRUE);
    }

    @Test
    public void setStatus() {
        integrationItemDao.updateStatus(integrationItem.getId(), IntegrationItemStatus.OFFSHELF.value());
        IntegrationItem item = integrationItemDao.findById(integrationItem.getId());
        Assert.assertTrue(item.getStatus() == IntegrationItemStatus.OFFSHELF.value());
    }

    @Test
    public void reduceQuantity() {
        integrationItemDao.updateStockQuantity(integrationItem.getId(), 99, IntegrationItemStatus.OFFSHELF.value());
        IntegrationItem item = integrationItemDao.findById(integrationItem.getId());
        Assert.assertTrue(item.getStockQuantity() == 99);
        Assert.assertTrue(item.getStatus() == IntegrationItemStatus.OFFSHELF.value());
    }

    @Test
    public void delete() {
        integrationItemDao.delete(integrationItem.getId());

        IntegrationItem deleted = integrationItemDao.findById(integrationItem.getId());
        assertNull(deleted);
    }

    @Test
    public void paging() {
        Map<String, Object> params = new HashMap<>();
        params.put("integrationPrice", 100);
        params.put("sortBy", "integrationPrice");
        params.put("sortType", 1);
        //params.put("userId", integrationItem.getUserId());
        Paging<IntegrationItem > integrationItemPaging = integrationItemDao.paging(0, 20, params);

        assertThat(integrationItemPaging.getTotal(), is(1L));
        assertEquals(integrationItemPaging.getData().get(0).getId(), integrationItem.getId());
    }

    private IntegrationItem make() throws Exception {
        IntegrationItem integrationItem = new IntegrationItem();

        
        integrationItem.setName("name");
        
        integrationItem.setStockQuantity(100);
        
        integrationItem.setStatus(1);
        
        integrationItem.setIntegrationPrice(100);
        
        integrationItem.setImagesJson("");
        
        integrationItem.setExtraJson(null);
        
        integrationItem.setCreatedAt(new Date());
        
        integrationItem.setUpdatedAt(new Date());
        

        return integrationItem;
    }

}