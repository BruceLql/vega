package com.sanlux.user.impl.dao;

import com.sanlux.user.model.Rank;
import io.terminus.common.model.Paging;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;


/**
 * Code generated by terminus code gen
 * Desc: 等级表，5个等级Dao 测试类
 * Date: 2016-08-03
 */
public class RankDaoTest extends BaseDaoTest {


    @Autowired
    private RankDao rankDao;

    private Rank rank;
    private Rank rank1;
    private Rank rank2;
    private Rank rank3;
    private Rank rank4;

    @Before
    public void init() {
        rank = makeRank("普通会员", 0l, 0L, 100L);
        rank1 = makeRank("白银会员", 1l, 101L, 200L);
        rank2 = makeRank("金牌会员", 2l, 201L, 300L);
        rank3 = makeRank("铂金会员", 3l, 301L, 400L);
        rank4 = makeRank("钻石会员", 4l, 401L, 500L);
        rankDao.create(rank);
        rankDao.create(rank1);
        rankDao.create(rank2);
        rankDao.create(rank3);
        rankDao.create(rank4);
        assertNotNull(rank.getId());
    }

    @Test
    public void findById() {
        Rank rankExist = rankDao.findById(rank.getId());
        assertNotNull(rankExist);
    }

    @Test
    public void update() {
        rank.setDiscount(23);
        rankDao.update(rank);
        Rank updated = rankDao.findById(rank.getId());
        assertEquals(updated.getDiscount(), Integer.valueOf(23));
    }


    @Test
    public void paging() {
        Map<String, Object> params = new HashMap<>();
        params.put("GrowthValueEnd", rank.getGrowthValueEnd());
        Paging<Rank> rankPaging = rankDao.paging(0, 20, params);
        assertThat(rankPaging.getTotal(), is(1L));
        assertEquals(rankPaging.getData().get(0).getId(), rank.getId());
    }

    @Test
    public void findAll() {
        List<Rank> lists = rankDao.findAll();
        assertNotNull(lists);
    }

    @Test
    public void findBaseRank() {
        Rank baseRank = rankDao.findBaseRank();
        assertThat(baseRank.getId(), is(1l));

    }


    @Test
    public void delete() {
        rankDao.delete(rank.getId());
        Rank deleted = rankDao.findById(rank.getId());
        assertNull(deleted);
    }

    @Test
    public void testFindByIntegral(){
        Rank rank = rankDao.findByIntegral(201L);
        assertNotNull(rank);

    }


    private Rank makeRank(String name, Long pid, Long growthValueStart, Long growthValueEnd) {

        Rank rank = new Rank();
        rank.setName(name);
        rank.setPid(pid);
        rank.setGrowthValueStart(growthValueStart);
        rank.setGrowthValueEnd(growthValueEnd);
        rank.setDiscount(0);
        rank.setExtraJson("324");
        rank.setCreatedAt(new Date());
        rank.setUpdatedAt(new Date());
        return rank;

    }


}