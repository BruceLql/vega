package com.sanlux.user.impl.dao;

import com.google.common.base.Optional;
import com.sanlux.user.model.DeliveryScope;
import io.terminus.common.model.Paging;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.*;


/**
 * Code generated by terminus code gen
 * Desc: 供货区域Dao 测试类
 * Date: 2016-08-08
 */
public class DeliveryScopeDaoTest extends BaseDaoTest {



    @Autowired
    private DeliveryScopeDao deliveryScopeDao;

    private DeliveryScope deliveryScope;

    @Before
    public void init() throws Exception {
        deliveryScope = make();

        deliveryScopeDao.create(deliveryScope);
        assertNotNull(deliveryScope.getId());
    }

    @Test
    public void findById() {
        DeliveryScope deliveryScopeExist = deliveryScopeDao.findById(deliveryScope.getId());

        assertNotNull(deliveryScopeExist);
    }

    @Test
    public void findDeliveryScopeByShopId() {
        Optional<DeliveryScope> scopeOptional =
                deliveryScopeDao.findDeliveryScopeByShopId(deliveryScope.getShopId());
        assertTrue(scopeOptional.isPresent());
        assertNotNull(scopeOptional.get());
    }

    @Test
    public void findDeliveryScopeByPId() {
        Optional<List<DeliveryScope>> scopeListOp = deliveryScopeDao.findDeliveryScopeByPId(deliveryScope.getPId());

        Assert.assertTrue(scopeListOp.isPresent());
        Assert.assertTrue(scopeListOp.get().size() != 0);
    }


    @Test
    public void updateByShopId() {
        Assert.assertTrue(deliveryScopeDao.updateScopeByShopId(deliveryScope));
    }

    @Test
    public void updateScope() {
        Assert.assertTrue(deliveryScopeDao.updateScope(deliveryScope));
    }

    @Test
    public void update() {
        deliveryScope.setShopName("test");
        deliveryScopeDao.update(deliveryScope);

        DeliveryScope  updated = deliveryScopeDao.findById(deliveryScope.getId());
        assertEquals("test", updated.getShopName());
    }

    @After
    public void delete() {
        deliveryScopeDao.delete(deliveryScope.getId());

        DeliveryScope deleted = deliveryScopeDao.findById(deliveryScope.getId());
        assertNull(deleted);
    }

    @Test
    public void findAllShopIds() throws Exception {
        List<Long> shopIds = deliveryScopeDao.findAllShopIds();
        assertTrue(!shopIds.isEmpty());
    }

    @Test
    public void paging() {
        Map<String, Object> params = new HashMap<>();
        params.put("shopId", deliveryScope.getShopId());
        Paging<DeliveryScope > deliveryScopePaging = deliveryScopeDao.paging(0, 20, params);

        assertThat(deliveryScopePaging.getTotal(), is(1L));
        assertEquals(deliveryScopePaging.getData().get(0).getId(), deliveryScope.getId());
    }

    private DeliveryScope make() throws Exception {
        DeliveryScope deliveryScope = new DeliveryScope();

        
        deliveryScope.setShopId(100L);
        
        deliveryScope.setShopName("name");

        deliveryScope.setPId(1L);

        deliveryScope.setScope(null);
        
        deliveryScope.setCreatedAt(new Date());
        
        deliveryScope.setUpdatedAt(new Date());
        

        return deliveryScope;
    }

}