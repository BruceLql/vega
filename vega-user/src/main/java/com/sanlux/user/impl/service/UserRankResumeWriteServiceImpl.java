package com.sanlux.user.impl.service;

import com.google.common.base.Throwables;
import com.sanlux.user.impl.dao.UserRankResumeDao;
import com.sanlux.user.model.UserRankResume;
import com.sanlux.user.service.UserRankResumeWriteService;
import io.terminus.common.model.Response;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Code generated by terminus code gen
 * Desc: 等级履历表写服务实现类
 * Date: 2016-08-04
 */
@Slf4j
@Service
public class UserRankResumeWriteServiceImpl implements UserRankResumeWriteService {

    private final UserRankResumeDao userRankResumeDao;

    @Autowired
    public UserRankResumeWriteServiceImpl(UserRankResumeDao userRankResumeDao) {
        this.userRankResumeDao = userRankResumeDao;
    }

    /**
     * 创建用户等级履历信息
     * @param userRankResume 操作履历
     * @return 操作履历id
     */

    @Override
    public Response<Long> createUserRankResume(UserRankResume userRankResume) {
        try {
            userRankResumeDao.create(userRankResume);
            return Response.ok(userRankResume.getId());
        } catch (Exception e) {
            log.error("create userRankResume failed, userRankResume:{}, cause:{}", userRankResume, Throwables.getStackTraceAsString(e));
            return Response.fail("user.rank.resume.create.fail");
        }
    }

    /**
     * 更新用户等级履历信息
     * @param userRankResume 操作履历
     * @return 是否更新成功
     */

    @Override
    public Response<Boolean> updateUserRankResume(UserRankResume userRankResume) {
        try {
            return Response.ok(userRankResumeDao.update(userRankResume));
        } catch (Exception e) {
            log.error("update userRankResume failed, userRankResume:{}, cause:{}", userRankResume, Throwables.getStackTraceAsString(e));
            return Response.fail("user.rank.resume.update.fail");
        }
    }

    /**
     * 通过ID删除用户等级履历信息
     * @param userRankResumeId 履历表主键ID
     * @return 是否删除成功
     */
    @Override
    public Response<Boolean> deleteUserRankResumeById(Long userRankResumeId) {
        try {
            return Response.ok(userRankResumeDao.delete(userRankResumeId));
        } catch (Exception e) {
            log.error("delete userRankResume failed, userRankResumeId:{}, cause:{}", userRankResumeId, Throwables.getStackTraceAsString(e));
            return Response.fail("user.rank.resume.delete.fail");
        }
    }
}
