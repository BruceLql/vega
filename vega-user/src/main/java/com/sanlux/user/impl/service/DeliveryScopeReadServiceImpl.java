package com.sanlux.user.impl.service;

import com.google.common.base.Optional;
import com.google.common.base.Throwables;
import com.sanlux.user.dto.scope.DeliveryScopeDto;
import com.sanlux.user.impl.dao.DeliveryScopeDao;
import com.sanlux.user.model.DeliveryScope;
import com.sanlux.user.service.DeliveryScopeReadService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 供货区域读服务实现类
 * Date: 2016-08-08
 */
@Slf4j
@Service
@RpcProvider
public class DeliveryScopeReadServiceImpl implements DeliveryScopeReadService {

    private final DeliveryScopeDao deliveryScopeDao;

    @Autowired
    public DeliveryScopeReadServiceImpl(DeliveryScopeDao deliveryScopeDao) {
        this.deliveryScopeDao = deliveryScopeDao;
    }

    @Override
    public Response<Optional<DeliveryScope>> findDeliveryScopeById(Long deliveryScopeId) {
        try {
            DeliveryScope deliveryScope = deliveryScopeDao.findById(deliveryScopeId);
            return Response.ok(Optional.fromNullable(deliveryScope));
        } catch (Exception e) {
            log.error("find deliveryScope by id : {} failed, cause:{}",
                    deliveryScopeId, Throwables.getStackTraceAsString(e));
            return Response.fail("delivery.scope.find.fail");
        }
    }

    @Override
    public Response<Optional<List<DeliveryScopeDto>>> findByShopId(Long shopId) {
        try {

            DeliveryScope scope = deliveryScopeDao.findDeliveryScopeByShopId(shopId).orNull();
            if(scope == null || CollectionUtils.isEmpty(scope.getScopeJson())) {
                return Response.ok(Optional.<List<DeliveryScopeDto>>absent());
            }

            return Response.ok(Optional.of(scope.getScopeJson()));
        } catch (Exception e) {
            log.error("find deliveryScope by shopId: {} failed, cause:{}",
                    shopId, Throwables.getStackTraceAsString(e));
            return Response.fail("delivery.scope.find.fail");
        }
    }



    @Override
    public Response<Optional<DeliveryScope>> findDeliveryScopeByShopId(Long shopId) {
        try {
            DeliveryScope scope = deliveryScopeDao.findDeliveryScopeByShopId(shopId).orNull();
            return Response.ok(Optional.fromNullable(scope));
        } catch (Exception e) {
            log.error("find deliveryScope by shopId : {} failed, cause:{}",
                    shopId, Throwables.getStackTraceAsString(e));
            return Response.fail("delivery.scope.find.fail");
        }
    }


}
