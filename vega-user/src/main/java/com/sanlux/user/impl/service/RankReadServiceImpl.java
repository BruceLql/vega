package com.sanlux.user.impl.service;

import com.google.common.base.Optional;
import com.google.common.base.Throwables;
import com.sanlux.user.dto.criteria.RankCriteria;
import com.sanlux.user.impl.dao.RankDao;
import com.sanlux.user.model.Rank;
import com.sanlux.user.service.RankReadService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 等级表，5个等级读服务实现类
 * Date: 2016-08-03
 */
@Slf4j
@Service
@RpcProvider
public class RankReadServiceImpl implements RankReadService {

    private final RankDao rankDao;

    @Autowired
    public RankReadServiceImpl(RankDao rankDao) {
        this.rankDao = rankDao;
    }

    /**
     * 通过等级ID获得对应等级信息
     * @param rankId 主键id
     * @return Rank 对应等级信息
     */
    @Override
    public Response<Optional<Rank>> findRankById(Long rankId) {
        try {
            return Response.ok(Optional.fromNullable(rankDao.findById(rankId)));
        } catch (Exception e) {
            log.error("find rank by id failed, rankId:{}, cause:{}", rankId, Throwables.getStackTraceAsString(e));
            return Response.fail("rank.find.fail");
        }
    }


    @Override
    public Response<Optional<Rank>> findRankByIntegral(Long integral) {
        try {
            return Response.ok(Optional.fromNullable(rankDao.findByIntegral(integral)));
        } catch (Exception e) {
            log.error("find rank by integral failed, integral:{}, cause:{}", integral, Throwables.getStackTraceAsString(e));
            return Response.fail("rank.find.fail");
        }
    }

    /**
     * 等级分页
     * @param criteria 分页条件
     * @return 分页
     */

    @Override
    public Response<Paging<Rank>> paging(RankCriteria criteria) {
        try{
            return Response.ok(rankDao.paging(criteria.toMap()));
        }catch (Exception e) {
            log.error("fail to find rank paging by rank criteria {},cause:{}",
                    criteria, Throwables.getStackTraceAsString(e));
            return Response.fail("rank.find.fail");
        }
    }

    /**
     * 获得全部的等级信息
     * @return 队列
     */

    @Override
    public Response<List<Rank>> findAll() {
        try{
            return Response.ok(rankDao.findAll());
        }catch (Exception e) {
            log.error("fail to find rank all by rank,cause:{}",
                     Throwables.getStackTraceAsString(e));
            return Response.fail("rank.findAll.fail");
        }    }
}
