package com.sanlux.user.impl.service;


import com.google.common.base.Throwables;
import com.sanlux.user.dto.UserDetail;
import com.sanlux.user.impl.dao.RankDao;
import com.sanlux.user.manager.ShopUserManager;
import com.sanlux.user.model.Rank;
import com.sanlux.user.dto.UserRank;
import com.sanlux.user.service.UserRankReadService;
import com.sanlux.user.service.UserRankWriteService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Arguments;
import io.terminus.common.utils.JsonMapper;
import io.terminus.parana.user.impl.dao.UserDao;
import io.terminus.parana.user.model.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import static com.google.common.base.Preconditions.checkArgument;

/**
 * Code generated by terminus code gen
 * Desc: 用户等级表写服务实现类
 * Date: 2016-08-03
 */
@Slf4j
@Service
@RpcProvider
public class UserRankWriteServiceImpl implements UserRankWriteService {


    private final RankDao rankDao;
    private final ShopUserManager companyUserManager;
    private final UserRankReadService userRankReadService;
    private final UserDao userdao;

    @Autowired
    public UserRankWriteServiceImpl(RankDao rankDao, ShopUserManager companyUserManager,
                                    UserRankReadService userRankReadService, UserDao userDao) {

        this.rankDao = rankDao;
        this.companyUserManager = companyUserManager;
        this.userRankReadService = userRankReadService;
        this.userdao = userDao;
    }

    /**
     * 更新用户等级信息
     *
     * @param userId      用户ID
     * @param rankId      等级ID
     * @param operateId   经销商ID
     * @param operateName 经销商名称
     * @return Boolean
     */

    @Override
    public Response<Boolean> updateUserRank(Long userId, Long rankId, Long operateId, String operateName) {

        try {

            if (Arguments.isNull(userId)) {
                log.error("update user rank fail because:user.id.is.null");
                return Response.fail("user.id.is.null");
            }

            if (Arguments.isNull(rankId)) {
                log.error("update user rank fail because:rank.id.is.null");
                return Response.fail("rank.id.is.null");
            }

            Rank rank = rankDao.findById(rankId);

            if (Arguments.isNull(rank)) {
                log.error("update user rank fail because:rank.not.exist");
                return Response.fail("rank.not.exist");
            }
            Response<UserRank> response = userRankReadService.findUserRankByUserId(userId);
            if (!response.isSuccess()) {
                log.error("user rank not exist");
                return Response.fail("user.rank.find.fail");
            } else {
                UserRank userRank = response.getResult();
                return Response.ok(companyUserManager.updateUserRank(userRank, rank, operateId, operateName));

            }
        } catch (IllegalArgumentException e) {
            log.error("arguments should not be null");
            return Response.fail(e.getMessage());
        } catch (Exception e) {
            log.error("update user rank fail , user id: {} rank id:{} operate id: {} operate name:{} cause: {} ",
                    userId,rankId,operateId,operateName, Throwables.getStackTraceAsString(e));
            return Response.fail("user.rank.update.fail");
        }

    }
    @Override
    public Response<Boolean> updateUserRank(UserRank userRank){
        try {
            Response<UserRank> response = userRankReadService.findUserRankByUserId(userRank.getUserId());
            if (!response.isSuccess()) {
                log.error("user rank not exist");
                return Response.fail("user.rank.find.fail");
            } else {
                UserRank tempUserRank = response.getResult();
                //检验信息,防止信息丢失
                userRank =checkUserRankInfo(userRank,tempUserRank);
            }

            return Response.ok(companyUserManager.updateUserRank(userRank));

        }  catch (Exception e) {
            log.error("update user rank:{} fail ,cause: {} ",userRank, Throwables.getStackTraceAsString(e));
            return Response.fail("user.rank.update.fail");
        }

    }


    @Override
    public Response<Boolean> initUserRank(Long userId) {
        try {

            if (Arguments.isNull(userId)) {
                log.error("userId is null");
                return Response.fail("user.rank.init.fail");
            }

            User user = userdao.findById(userId);
            if (user == null) {
                log.error("user find fail ,userId{}", userId);
                return Response.fail("user.find.fail");

            } else {
                Rank rank = rankDao.findBaseRank();
                UserRank userRank = new UserRank();
                userRank.setGrowthValue(rank.getGrowthValueStart());
                userRank.setRankId(rank.getId());
                userRank.setRankName(rank.getName());
                userRank.setUserId(user.getId());
                userRank.setUserName(user.getName());
                userRank.setIntegration(0l);//用户初始积分为0
                String userRankJson = JsonMapper.JSON_NON_EMPTY_MAPPER.toJson(userRank);
                user.setExtraJson(userRankJson);
                return Response.ok(userdao.update(user));
            }


        } catch (IllegalArgumentException e) {
            log.error("arguments should not be null");
            return Response.fail(e.getMessage());
        } catch (Exception e) {
            log.error("initUserRank failed");
            return Response.fail("user.rank.init.fail");
        }
    }

    /**
     * 检查userRank信息是否全面,防止字段丢失
     * @param userRank 要更新的信息,可能不完整
     * @param tempUserRank 当前数据库中的信息
     * @return
     */
    private UserRank checkUserRankInfo(UserRank userRank , UserRank tempUserRank){
        if(Arguments.isNull(userRank.getIntegration())){
            userRank.setIntegration(tempUserRank.getIntegration());
        }
        if(Arguments.isNull(userRank.getRankId())){
            userRank.setRankId(tempUserRank.getRankId());
        }
        if(Arguments.isNull(userRank.getRankName())){
            userRank.setRankName(tempUserRank.getRankName());
        }
        if(Arguments.isNull(userRank.getGrowthValue())){
            userRank.setGrowthValue(tempUserRank.getGrowthValue());
        }
        if(Arguments.isNull(userRank.getAvatar())){
            userRank.setAvatar(tempUserRank.getAvatar());
        }
        if(Arguments.isNull(userRank.getUserId())){
            userRank.setUserId(tempUserRank.getUserId());
        }
        if(Arguments.isNull(userRank.getUserName())){
            userRank.setUserName(tempUserRank.getUserName());
        }
        return userRank;
    }

}
