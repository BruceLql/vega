package com.sanlux.user.impl.service;

import com.google.common.base.Optional;
import com.google.common.base.Throwables;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.sanlux.common.utils.MapFilter;
import com.sanlux.user.dto.RankDto;
import com.sanlux.user.dto.UserDetail;
import com.sanlux.user.dto.UserDetailPageDto;
import com.sanlux.user.dto.criteria.ShopUserCriteria;
import com.sanlux.user.impl.dao.ShopUserDao;
import com.sanlux.user.impl.dao.RankDao;
import com.sanlux.user.model.ShopUser;
import com.sanlux.user.model.Rank;
import com.sanlux.user.dto.UserRank;
import com.sanlux.user.service.ShopUserReadService;
import com.sanlux.user.service.UserRankReadService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.PageInfo;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Arguments;
import io.terminus.common.utils.DayRange;
import io.terminus.parana.user.impl.dao.UserDao;
import io.terminus.parana.user.model.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: 经销商设定用户指定折扣表读服务实现类
 * Date: 2016-08-03
 */
@Slf4j
@Service
@RpcProvider
public class ShopUserReadServiceImpl implements ShopUserReadService {

    private final ShopUserDao shopUserDao;
    private final UserDao userDao;
    private final UserRankReadService userRankReadService;
    private final RankDao rankDao;

    @Autowired
    public ShopUserReadServiceImpl(ShopUserDao shopUserDao, UserDao userDao, RankDao rankDao, UserRankReadService userRankReadService) {
        this.shopUserDao = shopUserDao;
        this.userDao = userDao;
        this.userRankReadService = userRankReadService;
        this.rankDao = rankDao;
    }

    /**
     * 通过经销商用户ID获得经销商用户信息
     * @param shopUserDiscountId 主键id
     * @return 经销商用户信息
     */

    @Override
    public Response<Optional<ShopUser>> findById(Long shopUserDiscountId) {
        try {
            return Response.ok(Optional.fromNullable(shopUserDao.findById(shopUserDiscountId)));
        } catch (Exception e) {
            log.error("find shopUserDiscount by id failed, shopUserDiscountId:{}, cause:{}", shopUserDiscountId, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.discount.find.fail");
        }
    }

    /**
     *经销商用户分页
     * @param criteria 分页条件
     * @return 经销商用户分页信息
     */
    @Override
    public Response<Paging<ShopUser>> paging(ShopUserCriteria criteria) {
        try {
            return Response.ok(shopUserDao.paging(criteria.toMap()));
        } catch (Exception e) {
            log.error("fail to find shop user discount paging by shop user discount criteria {},cause:{}",
                    criteria, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.discount.find.fail");
        }
    }

    /**
     * 通过手机号和经销商ID获得经销商用户信息
     * @param mobile 手机号
     * @param shopId 经销商ID
     * @return 经销商用户信息
     */

    @Override
    public Response<ShopUser> findByMobileAndShopId(String mobile, Long shopId) {
        try {
            return Response.ok(shopUserDao.findByMobileAndShopId(mobile, shopId));
        } catch (Exception e) {
            log.error("fail to find shop user  by shop user  mobile {},cause:{}",
                    mobile, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.find.fail");
        }
    }


    /**
     * 获取经销商用户详细信息分页
     *
     * @param shopUserCriteria 经销商用户分页条件
     * @param shopNowDiscount 这个值纯粹是当参数传递并不是分页的条件
     * @return Response<UserDetailPageDto>
     */
    @Override
    public Response<UserDetailPageDto> pagingShopUser(ShopUserCriteria shopUserCriteria, Integer shopNowDiscount) {
        try {
            Paging<ShopUser> pages = shopUserDao.paging(shopUserCriteria.toMap());
            List<ShopUser> lists = pages.getData();
            List<UserDetail> lists_userDetail = Lists.newArrayList();
            for (ShopUser shopUser : lists) {
                UserDetail userDetail = new UserDetail();
                User user1 = userDao.findById(shopUser.getUserId());
                if(Arguments.isNull(user1)){
                    log.error("not find user by user id:{}",shopUser.getUserId());
                    continue;
                }
                UserRank userRank = userRankReadService.findUserRankByUserId(user1.getId()).getResult();
                if(Arguments.isNull(userRank)){
                    log.error("not find user rank by user id:{}",user1.getId());
                    continue;
                }
                userDetail.setShopUser(shopUser);
                userDetail.setEmail(user1.getEmail());
                userDetail.setStatus(user1.getStatus());
                userDetail.setRankName(userRank.getRankName());
                userDetail.setRankId(userRank.getRankId());
                lists_userDetail.add(userDetail);
            }
            UserDetailPageDto userDetailPageDto = new UserDetailPageDto();
            userDetailPageDto.setPage(new Paging<UserDetail>(pages.getTotal(), lists_userDetail));
            userDetailPageDto.setShopNowDiscount(shopNowDiscount);
            List<Rank> list_ranks = rankDao.findAll();
            List<RankDto> ranks = Lists.newArrayList();
            for (Rank rank : list_ranks) {
                RankDto rankDto = new RankDto();
                rankDto.setName(rank.getName());
                rankDto.setId(rank.getId());
                ranks.add(rankDto);
            }
            userDetailPageDto.setRanks(ranks);

            return Response.ok(userDetailPageDto);
        } catch (Exception e) {
            log.error("fail to find shop user discount paging by shop user discount criteria {},cause:{}",
                    shopUserCriteria, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.paging.fail");
        }
    }


    @Override
    public Response<Optional<ShopUser>> findShopUserByUserId(Long userId) {
        try {
            ShopUser shopUser = shopUserDao.findByUserId(userId);
            return Response.ok(Optional.fromNullable(shopUser));
        } catch (Exception e) {
            log.error("fail to find shop user by userId:{},cause:{}",
                     userId, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.find.fail");
        }
    }

    @Override
    public Response<ShopUser> findByMobile(String mobile) {
        try {
            ShopUser shopUser =shopUserDao.findByMobile(mobile);
            if(shopUser==null){
                return Response.fail("shop.user.not.exist");
            }
            return Response.ok(shopUser);

        }catch (Exception e){
            log.error("fail to find shop user by mobile:{},cause:{}",
                    mobile, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.find.fail");
        }


    }

}
