package com.sanlux.user.impl.service;

import com.google.common.base.Throwables;
import com.sanlux.user.impl.dao.DeliveryScopeDao;
import com.sanlux.user.model.DeliveryScope;
import com.sanlux.user.service.DeliveryScopeReadService;
import com.sanlux.user.service.DeliveryScopeWriteService;
import io.terminus.boot.rpc.common.annotation.RpcConsumer;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Code generated by terminus code gen
 * Desc: 供货区域写服务实现类
 * Date: 2016-08-08
 */
@Slf4j
@Service
@RpcProvider
public class DeliveryScopeWriteServiceImpl implements DeliveryScopeWriteService {

    private final DeliveryScopeDao deliveryScopeDao;

    @RpcConsumer
    private DeliveryScopeReadService deliveryScopeReadService;

    @Autowired
    public DeliveryScopeWriteServiceImpl(DeliveryScopeDao deliveryScopeDao) {
        this.deliveryScopeDao = deliveryScopeDao;
    }

    @Override
    public Response<Long> createOrUpdateDeliveryScope(DeliveryScope deliveryScope) {
        try {

            if(deliveryScope.getId() == null) {
                deliveryScopeDao.create(deliveryScope);
            } else {
                //只更新供货区域
                DeliveryScope toUpdate = new DeliveryScope();
                toUpdate.setId(deliveryScope.getId());
                toUpdate.setScope(deliveryScope.getScope());
                deliveryScopeDao.updateScope(toUpdate);
            }
            return Response.ok(deliveryScope.getId());
        } catch (Exception e) {
            log.error("create or update deliveryScope failed, deliveryScope:{}, cause:{}", deliveryScope, Throwables.getStackTraceAsString(e));
            return Response.fail("delivery.scope.create.fail");
        }
    }


    @Override
    public Response<Boolean> updateDeliveryScope(DeliveryScope deliveryScope) {
        try {
            return Response.ok(deliveryScopeDao.update(deliveryScope));
        } catch (Exception e) {
            log.error("update deliveryScope failed, deliveryScope:{}, cause:{}", deliveryScope, Throwables.getStackTraceAsString(e));
            return Response.fail("delivery.scope.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteDeliveryScopeById(Long deliveryScopeId) {
        try {
            return Response.ok(deliveryScopeDao.delete(deliveryScopeId));
        } catch (Exception e) {
            log.error("delete deliveryScope failed, deliveryScopeId:{}, cause:{}", deliveryScopeId, Throwables.getStackTraceAsString(e));
            return Response.fail("delivery.scope.delete.fail");
        }
    }
}
