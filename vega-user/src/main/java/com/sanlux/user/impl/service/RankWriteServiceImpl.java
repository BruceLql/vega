package com.sanlux.user.impl.service;

import com.google.common.base.Throwables;
import com.sanlux.user.impl.dao.RankDao;
import com.sanlux.user.model.Rank;
import com.sanlux.user.service.RankWriteService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Arguments;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import static com.google.common.base.Preconditions.checkArgument;

/**
 * Code generated by terminus code gen
 * Desc: 等级表，5个等级写服务实现类
 * Date: 2016-08-03
 */
@Slf4j
@Service
@RpcProvider
public class RankWriteServiceImpl implements RankWriteService {

    private final RankDao rankDao;

    @Autowired
    public RankWriteServiceImpl(RankDao rankDao) {
        this.rankDao = rankDao;
    }

    /***
     * 创建等级
     * @param rank 等级信息
     * @return 创建的等级ID
     */
    @Override
    public Response<Long> createRank(Rank rank) {
        try {
            rankDao.create(rank);
            return Response.ok(rank.getId());
        } catch (Exception e) {
            log.error("create rank failed, rank:{}, cause:{}", rank, Throwables.getStackTraceAsString(e));
            return Response.fail("rank.create.fail");
        }
    }

    /**
     * 更新等级信息
     * @param rank 等级信息
     * @return Boolean
     */
    @Override
    public Response<Boolean> updateRank(Rank rank) {
        try {
            return Response.ok(rankDao.update(rank));
        } catch (Exception e) {
            log.error("update rank failed, rank:{}, cause:{}", rank, Throwables.getStackTraceAsString(e));
            return Response.fail("rank.update.fail");
        }
    }

    /**
     * 根据ID删除对应等级信息
     * @param rankId 等级ID
     * @return
     */
    @Override
    public Response<Boolean> deleteRankById(Long rankId) {
        try {
            return Response.ok(rankDao.delete(rankId));
        } catch (Exception e) {
            log.error("delete rank failed, rankId:{}, cause:{}", rankId, Throwables.getStackTraceAsString(e));
            return Response.fail("rank.delete.fail");
        }
    }

    /**
     * 暂时抛弃的方法,更新等级
     * @param id
     * @param pid
     * @param growthValueStart
     * @param growthValueEnd
     * @param discount
     * @return
     */

    @Override
    public Response<Boolean> updateRank(Long id, Long pid,Integer growthValueStart, Integer growthValueEnd,Integer discount) {
        try {
            checkArgument(Arguments.notNull(id),"id should not be null");
            checkArgument(Arguments.notNull(pid),"pid should not be null");
            checkArgument(Arguments.notNull(growthValueStart),"growthValueStart should not be null");
            checkArgument(Arguments.notNull(growthValueEnd),"growthValueEnd should not be null");
            checkArgument(Arguments.notNull(discount),"discount should not be null");
            Rank rank=rankDao.findById(pid);//上一级
            Rank rank1 =rankDao.findByPid(id);//下一级
        if(Arguments.isNull(rank)){

            if(growthValueStart<=0){

                log.error("fail to update rank because growthValueStart should be bigger than 0 ");
                return Response.fail("growthValueStart should be bigger than 0 ");
            }
            if(growthValueEnd>=rank1.getGrowthValueStart()){

                log.error("fail to update rank because growthValueEnd should be small than next rank growthValueStart  ");
                return Response.fail("growthValueEnd should be small than next rank growthValueStart ");
            }

        }
            if(Arguments.isNull(rank1)){
                if(growthValueStart<=rank.getGrowthValueEnd()){
                    log.error("fail to update rank because growthValueStart should be bigger than last rank growthValueEnd  ");
                    return Response.fail("growthValueStart should be bigger than last rank growthValueEnd  ");
                }
            }
            if(!(growthValueStart>rank.getGrowthValueEnd()&&growthValueEnd<rank1.getGrowthValueStart()&&growthValueStart<=growthValueEnd)){

                    log.error("fail to update rank because growthValueStart should be bigger than last rank growthValueEnd and growthValueEnd should be small than next rank growthValueStart and growthValueStart should be small than growthValueEnd   ");
                    return Response.fail(" growthValueStart should be bigger than last rank growthValueEnd and growthValueEnd should be small than next rank growthValueStart and growthValueStart should be small than growthValueEnd ");
                }
        return Response.ok(rankDao.updateRank(id,pid,growthValueStart,growthValueEnd,discount));

    }catch (IllegalArgumentException e){
            log.error("arguments should not be null");
            return Response.fail(e.getMessage());
    }catch (Exception e) {
        log.error("updateRank failed");
        return Response.fail("rank.update.fail");
    }

    }
}
