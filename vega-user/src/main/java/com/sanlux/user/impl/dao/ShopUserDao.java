package com.sanlux.user.impl.dao;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.sanlux.user.model.ShopUser;
import io.terminus.common.mysql.dao.MyBatisDao;
import org.springframework.stereotype.Repository;

import java.util.*;

/**
 * Code generated by terminus code gen
 * Desc: 经销商设定用户指定折扣表Dao类
 * Date: 2016-08-03
 */
@Repository
public class ShopUserDao extends MyBatisDao<ShopUser> {

    /**
     * 通过手机号和经销商ID获得经销商用户
     * @param mobile 手机号
     * @param shopId 经销商ID
     * @return ShopUser
     */
    public ShopUser findByMobileAndShopId(String mobile, Long shopId) {
        HashMap<String, Object> params = Maps.newHashMap();
        params.put("mobile", mobile);
        params.put("shopId", shopId);
        return this.sqlSession.selectOne(sqlId("findByMobileAndShopId"), params);
    }

    /**
     * 更新经销商用户的折扣值
     * @param shopId   经销商ID
     * @param userId   用户ID
     * @param discount 折扣值
     * @return Boolean
     */
    public Boolean updateShopUserDiscount(Long shopId, Long userId, Integer discount) {
        HashMap<String, Object> params = Maps.newHashMap();
        params.put("shopId", shopId);
        params.put("userId", userId);
        params.put("discount", discount);
        return (this.sqlSession.update(sqlId("updateShopUserDiscount"), params) > 0);
    }

    /**
     * 更新专属会员的可用信用额度
     *
     * @param params 更新信息
     * @return Boolean
     */
    public Boolean updateShopUserCreditByUserId(Map<String, Object> params) {
        return (this.sqlSession.update(sqlId("updateShopUserCreditByUserId"), params) > 0);
    }

    public ShopUser findByUserId(Long userId) {
        return getSqlSession().selectOne(sqlId("findByUserId"), userId);
    }

    /**
     * 通过手机号获取经销商用户
     * @param mobile 手机号
     * @return 经销商用户
     */
    public ShopUser findByMobile(String mobile) {

        return getSqlSession().selectOne(sqlId("findByMobile"), mobile);
    }

    /**
     * 根据店铺ID删除会员
     * @param ShopId 店铺ID
     * @return 删除是否成功
     */

    public Boolean deleteByShopId(Long ShopId) {
        return getSqlSession().selectOne(sqlId("deleteByShopId"), ShopId);

    }

    /**
     * 根据用户ID删除会员
     * @param userId 用户ID
     * @return 删除是否成功
     */

    public Boolean deleteByUserId(Long userId) {
        return getSqlSession().selectOne(sqlId("deleteByUserId"), userId);

    }


    public Boolean refreshShopUserByUserId(Long userId,String mobile,String userName){
        HashMap<String, Object> params = Maps.newHashMap();
        params.put("userId", userId);
        params.put("mobile", mobile);
        params.put("userName", userName);
        return (this.sqlSession.update(sqlId("refreshShopUserByUserId"), params) > 0);
    }

    /**
     * 修改信用额度状态(是否可用)
     * @param userId 用户ID
     * @param isAvailable 是否可用, true 可用, false 不可用
     * @return 修改结果
     */
    public Boolean changeCreditStatusByUserId(Long userId, Boolean isAvailable) {
        return getSqlSession().update(sqlId("changeCreditStatusByUserId"), ImmutableMap.of(
                "userId", userId, "isAvailable", isAvailable
        )) == 1;
    }

    /**
     * 批量冻结专属会员信用额度
     * @param userIds 店铺IDs
     * @return 操作结果
     */
    public Boolean batchFrozeUserCredit(List<Long> userIds) {
        return getSqlSession().update(sqlId("batchFrozeUserCredit"), userIds) == userIds.size();
    }


}
