package com.sanlux.user.impl.service;

import com.google.common.base.Strings;
import com.google.common.base.Throwables;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.sanlux.common.constants.SystemConstant;
import com.sanlux.common.enums.VegaUserRole;
import com.sanlux.user.dto.scope.ShopUserDto;
import com.sanlux.user.impl.dao.ShopUserDao;
import com.sanlux.user.manager.ShopUserManager;
import com.sanlux.user.model.ShopUser;
import com.sanlux.user.model.ShopUserExtras;
import com.sanlux.user.service.ShopUserWriteService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Arguments;
import io.terminus.parana.common.enums.UserRole;
import io.terminus.parana.user.impl.dao.UserDao;
import io.terminus.parana.user.model.User;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.Objects;

import static com.google.common.base.Preconditions.checkState;

/**
 * Code generated by terminus code gen
 * Desc: 经销商设定用户指定折扣表写服务实现类
 * Date: 2016-08-03
 */
@Slf4j
@Service
@RpcProvider
public class ShopUserWriteServiceImpl implements ShopUserWriteService {

    private final ShopUserDao shopUserDao;

    private final UserDao userDao;

    private final ShopUserManager shopUserManager;


    @Autowired
    public ShopUserWriteServiceImpl(ShopUserDao shopUserDao, UserDao userDao, ShopUserManager shopUserManager) {
        this.shopUserDao = shopUserDao;
        this.userDao = userDao;
        this.shopUserManager = shopUserManager;
    }

    /**
     * 创建经销商用户
     *
     * @param shopUser 经销商用户
     * @return 经销商用户id
     */

    @Override
    public Response<Long> createShopUserDiscount(ShopUser shopUser) {
        try {
            shopUserDao.create(shopUser);
            return Response.ok(shopUser.getId());
        } catch (Exception e) {
            log.error("create shopUserDiscount failed, shopUserDiscount:{}, cause:{}", shopUser, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.discount.create.fail");
        }
    }

    /**
     * 更新经销商用户
     *
     * @param shopUser 经销商用户
     * @return 是否更新成功
     */

    @Override
    public Response<Boolean> updateShopUserDiscount(ShopUser shopUser) {
        try {
            return Response.ok(shopUserDao.update(shopUser));
        } catch (Exception e) {
            log.error("update shopUserDiscount failed, shopUserDiscount:{}, cause:{}", shopUser, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.discount.update.fail");
        }
    }

    /**
     * 通过经销商用户ID删除经销商用户
     *
     * @param shopUserDiscountId 经销商用户ID,不是用户ID
     * @return 是否删除成功
     */

    @Override
    public Response<Boolean> deleteShopUserDiscountById(Long shopUserDiscountId) {
        try {
            return Response.ok(shopUserDao.delete(shopUserDiscountId));
        } catch (Exception e) {
            log.error("delete shopUserDiscount failed, shopUserDiscountId:{}, cause:{}", shopUserDiscountId, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.discount.delete.fail");
        }
    }

    /**
     * 添加会员,经销商添加经销商用户
     *
     * @param mobile   手机号
     * @param shopId   经销商ID
     * @param shopName 经销商名称
     * @param extra    备注
     * @return 是否添加成功
     */
    @Override
    public Response<Boolean> addShopUser(String mobile, Long shopId, String shopName, String extra) {
        try {
            //检查用户是否存在
            User user = userDao.findByMobile(mobile);
            checkState(Arguments.notNull(user), "user.not.exist.fail");
            List<String> roles = user.getRoles();
            //判断用户是否为普通用户
            checkState(user.getType().equals(2), "shop.user.not.ordinary.fail");
            if(!roles.contains(VegaUserRole.SUPPLIER.name())) {
                //买家是供应商时作为普通用户处理,不做判断
                checkState(Objects.equals(roles.size(), 1) && roles.get(0).equals(UserRole.BUYER.name()), "shop.user.not.ordinary.fail");
            }
            ShopUser shopUser = new ShopUser();
            shopUser.setShopId(shopId);
            shopUser.setUserId(user.getId());
            shopUser.setUserName(user.getName());
            shopUser.setShopName(shopName);
            shopUser.setMobile(mobile);
            shopUser.setDiscount(0);//默认未设置折扣信息
            if(!Strings.isNullOrEmpty(extra)){
                Map<String,String> extraMap = Maps.newHashMap();
                extraMap.put(SystemConstant.SHOP_USER_EXTRA,extra);
                shopUser.setExtra(extraMap);
            }

            return Response.ok(shopUserDao.create(shopUser));

        } catch (IllegalStateException e) {
            log.error("add shop user failed ,mobile:{},shopId{},shopName{}, error:{}", mobile, shopId, shopName, e.getMessage());
            return Response.fail(e.getMessage());

        } catch (Exception e) {
            log.error("add shop user failed ,mobile:{},shopId{},shopName{}, cause:{}", mobile, shopId, shopName, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.add.fail");
        }
    }

    @Override
    public Response<Boolean> addShopUser(ShopUserDto shopUserDto) {
        try {
            User user = userDao.findByMobile(shopUserDto.getMobile());
            checkState(Arguments.notNull(user), "user.not.exist.fail");

            // 会员表信息
            ShopUser shopUser = shopUserDto.getShopUser();
            shopUser.setUserId(user.getId());
            shopUser.setUserName(user.getName());
            shopUser.setMobile(shopUserDto.getMobile());
            shopUser.setShopId(shopUserDto.getShopId());
            shopUser.setShopName(shopUserDto.getShopName());
            shopUser.setDiscount(0);//默认未设置折扣信息
            if(!Strings.isNullOrEmpty(shopUserDto.getExtra())){
                // 备注
                Map<String,String> extraMap = Maps.newHashMap();
                extraMap.put(SystemConstant.SHOP_USER_EXTRA,shopUserDto.getExtra());
                shopUser.setExtra(extraMap);
            }

            // 会员表扩展信息
            ShopUserExtras shopUserExtras = shopUserDto.getShopUserExtras();
            shopUserExtras.setUserId(user.getId());
            shopUserExtras.setUserName(user.getName());
            shopUserExtras.setMobile(shopUserDto.getMobile());
            shopUserExtras.setUserType(user.getType());
            shopUserExtras.setUserStatus(user.getStatus());
            shopUserExtras.setShopId(shopUserDto.getShopId());
            shopUserExtras.setShopName(shopUserDto.getShopName());

            return Response.ok(shopUserManager.addShopUser(shopUser, shopUserExtras));

        } catch (IllegalStateException e) {
            log.error("add shop user failed ,mobile:{},shopId{},shopName{}, error:{}",
                    shopUserDto.getMobile(), shopUserDto.getShopId(), shopUserDto.getShopName(), e.getMessage());
            return Response.fail(e.getMessage());
        } catch (Exception e) {
            log.error("add shop user failed ,mobile:{},shopId{},shopName{}, cause:{}",
                    shopUserDto.getMobile(), shopUserDto.getShopId(), shopUserDto.getShopName(), Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.add.fail");
        }
    }

    @Override
    public Response<Boolean> updateShopUser(ShopUserDto shopUserDto) {
        try {
            // 会员表信息
            ShopUser shopUser = shopUserDto.getShopUser();
            if(!Strings.isNullOrEmpty(shopUserDto.getExtra())){
                // 备注
                Map<String,String> extraMap = Maps.newHashMap();
                extraMap.put(SystemConstant.SHOP_USER_EXTRA,shopUserDto.getExtra());
                shopUser.setExtra(extraMap);
            }

            // 会员表扩展信息
            ShopUserExtras shopUserExtras = shopUserDto.getShopUserExtras();


            return Response.ok(shopUserManager.updateShopUser(shopUser, shopUserExtras, shopUserDto));

        } catch (IllegalStateException e) {
            log.error("update shop user failed ,mobile:{},shopId{},shopName{}, error:{}",
                    shopUserDto.getMobile(), shopUserDto.getShopId(), shopUserDto.getShopName(), e.getMessage());
            return Response.fail(e.getMessage());
        } catch (Exception e) {
            log.error("update shop user failed ,mobile:{},shopId{},shopName{}, cause:{}",
                    shopUserDto.getMobile(), shopUserDto.getShopId(), shopUserDto.getShopName(), Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.update.fail");
        }
    }

    /**
     * 经销商为经销商用户设定特定折扣
     *
     * @param shopId   经销商ID
     * @param userId   用户ID
     * @param discount 折扣
     * @return 是否更新成功
     */
    @Override
    public Response<Boolean> updateShopUserDiscount(Long shopId, Long userId, Integer discount) {
        try {
            return Response.ok(shopUserDao.updateShopUserDiscount(shopId, userId, discount));
        } catch (Exception e) {
            log.error("update shopUserDiscount failed, shopId:{},userId{},discount{}, cause:{}", shopId, userId, discount, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.discount.update.fail");
        }
    }

    @Override
    public Response<Boolean> updateShopUserCreditByUserId(Long userId, Long availableCredit, Long totalCredit) {
        try {
            Map<String, Object> params = Maps.newHashMap();
            params.put("userId", userId);
            params.put("availableCredit", availableCredit);
            if (!Objects.isNull(totalCredit)) {
                params.put("totalCredit", totalCredit);
            }
            return Response.ok(shopUserDao.updateShopUserCreditByUserId(params));
        } catch (Exception e) {
            log.error("update shopUserAvailableCredit failed, userId = {},availableCredit = {}, totalCredit ={} cause:{}",
                    userId, availableCredit, totalCredit, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.discount.update.fail");
        }
    }

    @Override
    public Response<Boolean> AddOrUpdateShopUserCreditByUserId(Long userId, ShopUser shopUser) {
        try {
            return Response.ok(shopUserDao.updateShopUserCreditByUserId(ImmutableMap.of("userId", userId,
                    "isCreditAvailable", shopUser.getIsCreditAvailable(),
                    "totalCredit", shopUser.getTotalCredit(),
                    "availableCredit", shopUser.getAvailableCredit(),
                    "creditPaymentDays", shopUser.getCreditPaymentDays())));
        } catch (Exception e) {
            log.error("update shopUserAvailableCredit failed, userId{},shopUser{}, cause:{}", userId, shopUser, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.discount.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteShopUserById(Long userId) {

        try {
            return Response.ok(shopUserDao.deleteByUserId(userId));
        } catch (Exception e) {
            log.error("delete shopUser failed,userId{}, cause:{}", userId, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.delete.fail");
        }
    }

    @Override
    public Response<Boolean> deleteShopUserByShopId(Long ShopId) {

        try {
            return Response.ok(shopUserDao.deleteByShopId(ShopId));
        } catch (Exception e) {
            log.error("delete shopUser failed,ShopId{}, cause:{}", ShopId, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.delete.fail");
        }
    }

    @Override
    public Response<Boolean> refreshShopUserByUserId(Long userId) {
        try {
            User user = userDao.findById(userId);
            if (user == null) {
                log.error("user find failed,userId{}, cause:{}", userId, "user not exist");
                return Response.fail("shop.user.refresh.fail");
            }

            return Response.ok(shopUserManager.refreshShopUserByUserId(userId, user));
        } catch (Exception e) {
            log.error("refresh shopUser failed,userId{}, cause:{}", userId, Throwables.getStackTraceAsString(e));
            return Response.fail("shop.user.refresh.fail");
        }
    }

    @Override
    public Response<Boolean> changeCreditStatusByUserId(Long userId, Boolean isAvailable) {
        try {
            return Response.ok(shopUserDao.changeCreditStatusByUserId(userId, isAvailable));
        }catch (Exception e) {
            log.error("failed to change isCreditAvailable = ({}) by userId = {}, cause : {}",
                    isAvailable, userId, Throwables.getStackTraceAsString(e));
            return Response.fail("chang.credit.status.failed");
        }
    }

    @Override
    public Response<Boolean> batchFrozeUserCredit(List<Long> userIds) {
        try {
            return Response.ok(shopUserDao.batchFrozeUserCredit(userIds));
        }catch (Exception e) {
            log.error("failed to batch froze user credit by userIds = [{}], cause : {}",
                    userIds, Throwables.getStackTraceAsString(e));
            return Response.fail("froze.user.credit.failed");
        }
    }
}
