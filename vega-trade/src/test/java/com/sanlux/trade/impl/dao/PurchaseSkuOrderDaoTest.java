package com.sanlux.trade.impl.dao;

import com.google.common.collect.Lists;
import com.sanlux.trade.model.PurchaseSkuOrder;
import io.terminus.common.model.Paging;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.*;


/**
 * Code generated by terminus code gen
 * Desc: Dao 测试类
 * Date: 2016-08-16
 */
public class PurchaseSkuOrderDaoTest extends BaseDaoTest {



    @Autowired
    private PurchaseSkuOrderDao purchaseSkuOrderDao;

    private PurchaseSkuOrder purchaseSkuOrder;

    @Before
    public void init() {
        purchaseSkuOrder = make();

        purchaseSkuOrderDao.create(purchaseSkuOrder);
        assertNotNull(purchaseSkuOrder.getId());
    }

    @Test
    public void findById() {
        PurchaseSkuOrder purchaseSkuOrderExist = purchaseSkuOrderDao.findById(purchaseSkuOrder.getId());

        assertNotNull(purchaseSkuOrderExist);
    }

    @Test
    public void update() {
        purchaseSkuOrder.setStatus(1);
        purchaseSkuOrderDao.update(purchaseSkuOrder);
        PurchaseSkuOrder  updated = purchaseSkuOrderDao.findById(purchaseSkuOrder.getId());
        assertEquals(updated.getStatus(), Integer.valueOf(1));
    }

    @Test
    public void delete() {
        purchaseSkuOrderDao.delete(purchaseSkuOrder.getId());

        PurchaseSkuOrder deleted = purchaseSkuOrderDao.findById(purchaseSkuOrder.getId());
        assertNull(deleted);
    }

    @Test
    public void paging() {
        Map<String, Object> params = new HashMap<>();
        params.put("status", purchaseSkuOrder.getStatus());
        Paging<PurchaseSkuOrder > purchaseSkuOrderPaging = purchaseSkuOrderDao.paging(0, 20, params);

        assertThat(purchaseSkuOrderPaging.getTotal(), is(1L));
        assertEquals(purchaseSkuOrderPaging.getData().get(0).getId(), purchaseSkuOrder.getId());
    }

    @Test
    public void testFindByPurchaseOrderIdAndSkuId(){
        assertNotNull(purchaseSkuOrderDao.findByPurchaseOrderIdAndSkuId(purchaseSkuOrder.getPurchaseId(),purchaseSkuOrder.getSkuId()));
    }

    @Test
    public void testUpdateQuantity(){
        assertTrue(purchaseSkuOrderDao.updateQuantity(purchaseSkuOrder.getId(),2));
        PurchaseSkuOrder exist = purchaseSkuOrderDao.findById(purchaseSkuOrder.getId());
        assertEquals(exist.getQuantity(),Integer.valueOf(2));

    }

    @Test
    public void testDeleteByPurchaseOrderIdAndSkuIds(){
        assertTrue(purchaseSkuOrderDao.deleteByPurchaseOrderIdAndSkuIds(purchaseSkuOrder.getPurchaseId(), Lists.newArrayList(purchaseSkuOrder.getSkuId())));

    }

    @Test
    public void testFinByPurchaseOrderId(){
        assertNotNull(purchaseSkuOrderDao.finByPurchaseOrderId(purchaseSkuOrder.getPurchaseId()));

    }

    @Test
    public void testFinByPurchaseOrderIdAndStatus(){
        assertNotNull(purchaseSkuOrderDao.finByPurchaseOrderIdAndStatus(purchaseSkuOrder.getPurchaseId(), purchaseSkuOrder.getStatus()));

    }

    @Test
    public void testFindShopIdsByPurchaseOrderId(){
        assertNotNull(purchaseSkuOrderDao.findShopIdsByPurchaseOrderId(purchaseSkuOrder.getPurchaseId()));
    }

    @Test
    public void testBatchUpdateStatus(){
        assertTrue(purchaseSkuOrderDao.batchUpdateStatus(Lists.newArrayList(purchaseSkuOrder.getId()),purchaseSkuOrder.getStatus()));

    }


    private PurchaseSkuOrder make() {
        PurchaseSkuOrder purchaseSkuOrder = new PurchaseSkuOrder();

        
        purchaseSkuOrder.setPurchaseId(1l);
        
        purchaseSkuOrder.setBuyerId(1l);
        
        purchaseSkuOrder.setBuyerName("buyer name");
        
        purchaseSkuOrder.setShopId(1l);
        
        purchaseSkuOrder.setShopName("shop name");
        
        purchaseSkuOrder.setSkuId(1l);
        
        purchaseSkuOrder.setQuantity(23);
        
        purchaseSkuOrder.setStatus(1);
        
        purchaseSkuOrder.setExtraJson("json");
        
        purchaseSkuOrder.setCreatedAt(new Date());
        
        purchaseSkuOrder.setUpdatedAt(new Date());
        

        return purchaseSkuOrder;
    }

}