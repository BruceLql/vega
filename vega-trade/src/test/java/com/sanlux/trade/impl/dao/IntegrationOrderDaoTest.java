package com.sanlux.trade.impl.dao;

import com.sanlux.trade.model.IntegrationOrder;
import io.terminus.common.model.Paging;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;


/**
 * Code generated by terminus code gen
 * Desc: 积分商品订单Dao 测试类
 * Date: 2016-11-07
 */
public class IntegrationOrderDaoTest extends BaseDaoTest {



    @Autowired
    private IntegrationOrderDao integrationOrderDao;

    private IntegrationOrder integrationOrder;

    @Before
    public void init() throws Exception {
        integrationOrder = make();

        integrationOrderDao.create(integrationOrder);
        assertNotNull(integrationOrder.getId());
    }

    @Test
    public void findById() {
        IntegrationOrder integrationOrderExist = integrationOrderDao.findById(integrationOrder.getId());

        assertNotNull(integrationOrderExist);
    }

    @Test
    public void update() {
        // todo
        integrationOrder.setUpdatedAt(new Date());
        integrationOrderDao.update(integrationOrder);

        IntegrationOrder  updated = integrationOrderDao.findById(integrationOrder.getId());
        // todo
        //assertEquals(updated.getHasDisplay(), Boolean.TRUE);
    }

    @Test
    public void delivery () {
        integrationOrder.setDeliveryNo("test");
        integrationOrderDao.delivery(integrationOrder);

        IntegrationOrder order = integrationOrderDao.findById(integrationOrder.getId());
        Assert.assertEquals("test", order.getDeliveryNo());
    }

    @After
    public void delete() {
        integrationOrderDao.delete(integrationOrder.getId());

        IntegrationOrder deleted = integrationOrderDao.findById(integrationOrder.getId());
        assertNull(deleted);
    }

    @Test
    public void paging() {
        Map<String, Object> params = new HashMap<>();
        params.put("buyerName", integrationOrder.getBuyerName());
        Paging<IntegrationOrder > integrationOrderPaging = integrationOrderDao.paging(0, 20, params);

        assertThat(integrationOrderPaging.getTotal(), is(1L));
        assertEquals(integrationOrderPaging.getData().get(0).getId(), integrationOrder.getId());
    }

    private IntegrationOrder make() throws Exception {
        IntegrationOrder integrationOrder = new IntegrationOrder();

        
        integrationOrder.setBuyerId(1L);
        
        integrationOrder.setBuyerName("buyer name");
        
        integrationOrder.setBuyerPhone("8888");
        
        integrationOrder.setItemId(100L);
        
        integrationOrder.setItemName("item name");
        
        integrationOrder.setItemImage("");
        
        integrationOrder.setIntegrationPrice(100);
        
        integrationOrder.setIntegrationFee(100);
        
        integrationOrder.setQuantity(1);
        
        integrationOrder.setStatus(1);
        
        integrationOrder.setAddressInfoJson("add");
        
        integrationOrder.setDeliveryCompany("");
        
        integrationOrder.setDeliveryNo("");
        
        integrationOrder.setExtraJson(null);
        
        integrationOrder.setCreatedAt(new Date());
        
        integrationOrder.setUpdatedAt(new Date());
        

        return integrationOrder;
    }

}