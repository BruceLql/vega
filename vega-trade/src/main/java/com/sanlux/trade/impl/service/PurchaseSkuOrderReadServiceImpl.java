package com.sanlux.trade.impl.service;

import com.google.common.base.Optional;
import com.google.common.base.Throwables;
import com.sanlux.trade.dto.PurchaseSkuOrderCriteria;
import com.sanlux.trade.impl.dao.PurchaseSkuOrderDao;
import com.sanlux.trade.model.PurchaseSkuOrder;
import com.sanlux.trade.service.PurchaseSkuOrderReadService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 读服务实现类
 * Date: 2016-08-09
 */
@Slf4j
@Service
@RpcProvider
public class PurchaseSkuOrderReadServiceImpl implements PurchaseSkuOrderReadService {

    private final PurchaseSkuOrderDao purchaseSkuOrderDao;

    @Autowired
    public PurchaseSkuOrderReadServiceImpl(PurchaseSkuOrderDao purchaseSkuOrderDao) {
        this.purchaseSkuOrderDao = purchaseSkuOrderDao;
    }

    @Override
    public Response<Optional<PurchaseSkuOrder>> findPurchaseSkuOrderById(Long purchaseSkuOrderId) {
        try {
            return Response.ok(Optional.fromNullable(purchaseSkuOrderDao.findById(purchaseSkuOrderId)));
        } catch (Exception e) {
            log.error("find purchaseSkuOrder by id failed, purchaseSkuOrderId:{}, cause:{}", purchaseSkuOrderId,
                    Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.sku.order.find.fail");
        }
    }

    @Override
    public Response<List<PurchaseSkuOrder>> findByPurchaseOrderId(Long purchaseOrderId) {
        try {
            return Response.ok(purchaseSkuOrderDao.finByPurchaseOrderId(purchaseOrderId));
        }catch (Exception e){
            log.error("find purchase sku order by purchase order id:{} fail,cause:{}",purchaseOrderId,
                    Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.sku.order.find.fail");
        }
    }

    @Override
    public Response<List<PurchaseSkuOrder>> finByPurchaseOrderIdAndStatus(Long purchaseOrderId,Integer status) {
        try {
            return Response.ok(purchaseSkuOrderDao.finByPurchaseOrderIdAndStatus(purchaseOrderId,status));
        }catch (Exception e){
            log.error("find purchase sku order by purchase order id:{} status:{} fail,cause:{}",purchaseOrderId,status,
                    Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.sku.order.find.fail");
        }
    }

    @Override
    public Response<List<PurchaseSkuOrder>> finByPurchaseOrderIdAndStatusAndShopId(Long purchaseOrderId,Integer status,
                                                                                   Long shopId) {
        try {
            return Response.ok(purchaseSkuOrderDao.finByPurchaseOrderIdAndStatusAndShopId(purchaseOrderId,status,shopId));
        }catch (Exception e){
            log.error("find purchase sku order by purchase order id:{} status:{} shop id:{} fail,cause:{}",purchaseOrderId,
                    status,shopId,Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.sku.order.find.fail");
        }
    }



    @Override
    public Response<List<Long>> findShopIdsByByPurchaseOrderId(Long purchaseOrderId) {
        try {
            return Response.ok(purchaseSkuOrderDao.findShopIdsByPurchaseOrderId(purchaseOrderId));
        }catch (Exception e){
            log.error("find shop ids by purchase order id:{} fail,cause:{}",purchaseOrderId,
                    Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.sku.order.find.fail");
        }
    }

    @Override
    public Response<Paging<PurchaseSkuOrder>> paging(PurchaseSkuOrderCriteria criteria) {
        try{
            return Response.ok(purchaseSkuOrderDao.paging(criteria.toMap()));
        }catch (Exception e) {
            log.error("fail to find purchase sku trade by criteria {},cause:{}",
                    criteria, Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.sku.order.find.fail");
        }
    }
}
