package com.sanlux.trade.impl.service;

import com.google.common.base.Optional;
import com.google.common.base.Throwables;
import com.sanlux.trade.dto.PurchaseOrderCriteria;
import com.sanlux.trade.impl.dao.PurchaseOrderDao;
import com.sanlux.trade.model.PurchaseOrder;
import com.sanlux.trade.service.PurchaseOrderReadService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Arguments;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

import static com.google.common.base.Preconditions.checkArgument;

/**
 * Code generated by terminus code gen
 * Desc: 读服务实现类
 * Date: 2016-08-09
 */
@Slf4j
@Service
@RpcProvider
public class PurchaseOrderReadServiceImpl implements PurchaseOrderReadService {

    private final PurchaseOrderDao purchaseOrderDao;

    @Autowired
    public PurchaseOrderReadServiceImpl(PurchaseOrderDao purchaseOrderDao) {
        this.purchaseOrderDao = purchaseOrderDao;
    }

    @Override
    public Response<Optional<PurchaseOrder>> findPurchaseOrderById(Long purchaseOrderId) {
        try {
            return Response.ok(Optional.fromNullable(purchaseOrderDao.findById(purchaseOrderId)));
        } catch (Exception e) {
            log.error("find purchaseOrder by id failed, purchaseOrderId:{}, cause:{}", purchaseOrderId, Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.order.find.fail");
        }
    }

    @Override
    public Response<Optional<PurchaseOrder>> findByBuyerIdAndName(Long buyerId,String name){
        try {
            return Response.ok(Optional.fromNullable(purchaseOrderDao.findByBuyerIdAndName(buyerId,name)));
        } catch (Exception e) {
            log.error("find purchaseOrder by id failed, buyerId:{}、purchase name:{} cause:{}", buyerId,name, Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.order.find.fail");
        }
    }

    @Override
    public Response<Paging<PurchaseOrder>> paging(PurchaseOrderCriteria criteria) {
        try{
            return Response.ok(purchaseOrderDao.paging(criteria.toMap()));
        }catch (Exception e) {
            log.error("fail to find purchase trade by criteria {},cause:{}",
                    criteria, Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.order.find.fail");
        }
    }

    @Override
    public Response<List<PurchaseOrder>> findByBuyerId(Long buyerId) {
        try {
            checkArgument(Arguments.notNull(buyerId),"current.user.id.invalid");
            return Response.ok(purchaseOrderDao.findByBuyerId(buyerId));

        }catch (IllegalArgumentException e){
            log.error("query all purchase order by buyer id:{} fail,error:{}",buyerId,e.getMessage());
            return Response.fail(e.getMessage());
        }catch (Exception e){
            log.error("query all purchase order by buyer id:{} fail,cause:{}",buyerId,Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.order.find.fail");
        }
    }

    @Override
    public Response<List<PurchaseOrder>> findByBuyerIdNotTemp(Long buyerId, Integer skuQuantity) {
        try {
            checkArgument(Arguments.notNull(buyerId),"current.user.id.invalid");
            return Response.ok(purchaseOrderDao.findByBuyerIdNotTemp(buyerId, skuQuantity));

        }catch (IllegalArgumentException e){
            log.error("query all purchase order by buyer id:{} fail,error:{}",buyerId,e.getMessage());
            return Response.fail(e.getMessage());
        }catch (Exception e){
            log.error("query all purchase order by buyer id:{} fail,cause:{}",buyerId,Throwables.getStackTraceAsString(e));
            return Response.fail("purchase.order.find.fail");
        }
    }
}
