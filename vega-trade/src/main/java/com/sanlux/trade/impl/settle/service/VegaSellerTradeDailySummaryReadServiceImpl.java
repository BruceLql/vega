package com.sanlux.trade.impl.settle.service;

import com.google.common.base.Throwables;
import com.sanlux.common.enums.VegaShopType;
import com.sanlux.trade.impl.settle.dao.VegaSellerTradeDailySummaryDao;
import com.sanlux.trade.settle.criteria.VegaSellerTradeDailySummaryCriteria;
import com.sanlux.trade.settle.model.VegaSellerTradeDailySummary;
import com.sanlux.trade.settle.service.VegaSellerTradeDailySummaryReadService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Code generated by CodeGen
 * Desc: 三力士商家日汇总读服务实现类
 * Date: 2016-12-15
 */
@Slf4j
@Service
@RpcProvider
public class VegaSellerTradeDailySummaryReadServiceImpl implements VegaSellerTradeDailySummaryReadService {

    private final VegaSellerTradeDailySummaryDao vegaSellerTradeDailySummaryDao;

    @Autowired
    public VegaSellerTradeDailySummaryReadServiceImpl(VegaSellerTradeDailySummaryDao vegaSellerTradeDailySummaryDao) {
        this.vegaSellerTradeDailySummaryDao = vegaSellerTradeDailySummaryDao;
    }

    @Override
    public Response<VegaSellerTradeDailySummary> findSellerTradeDailySummaryById(Long sellerTradeDailySummaryId) {
        try {
            return Response.ok(vegaSellerTradeDailySummaryDao.findById(sellerTradeDailySummaryId));
        } catch (Exception e) {
            log.error("find sellerTradeDailySummary by id failed, sellerTradeDailySummaryId:{}, cause:{}", sellerTradeDailySummaryId, Throwables.getStackTraceAsString(e));
            return Response.fail("sellerTradeDailySummary.find.fail");
        }
    }

    @Override
    public Response<List<VegaSellerTradeDailySummary>> findAllSellerTradeDailySummarys() {
        try {
            return Response.ok(vegaSellerTradeDailySummaryDao.listAll());
        } catch (Exception e) {
            log.error("find all sellerTradeDailySummary failed, cause:{}", Throwables.getStackTraceAsString(e));
            return Response.fail("sellerTradeDailySummary.find.fail");
        }
    }

    @Override
    public Response<Paging<VegaSellerTradeDailySummary>> pagingSellerTradeDailySummarys(VegaSellerTradeDailySummaryCriteria criteria) {
        try {
            return Response.ok(vegaSellerTradeDailySummaryDao.paging(criteria.toMap()));
        } catch (Exception e) {
            log.error("paging sellerTradeDailySummary failed, criteria:{}, cause:{}", criteria, Throwables.getStackTraceAsString(e));
            return Response.fail("sellerTradeDailySummary.find.fail");
        }
    }

    @Override
    public Response<VegaSellerTradeDailySummary> findBySellerIdAndSumAtAndSummaryType(Long sellerId, Date sumAt, Integer summaryType) {
        try {
            return Response.ok(vegaSellerTradeDailySummaryDao.findBySellerIdAndSumAtAndSummaryType(sellerId, sumAt, summaryType));
        } catch (Exception e) {
            log.error("find sellerTradeDailySummary failed, sellerId = {}, sumAt = {}, summaryType = {}, cause:{}",
                    sellerId, sumAt, summaryType, Throwables.getStackTraceAsString(e));
            return Response.fail("sellerTradeDailySummary.find.fail");
        }
    }

    @Override
    public Response<Long> countDealerPayment(Integer Type) {
        //默认为一级经销商
        Integer summaryType = 2;
        Integer transStatus = 0;
        try {
            if (VegaShopType.DEALER_SECOND.value() == Type) {
                //二级经销商
                summaryType = 3;
                transStatus = 0;
            }
            return Response.ok(vegaSellerTradeDailySummaryDao.countDealerPayment(summaryType, transStatus));
        } catch (Exception e) {
            log.error("count dealer payment failed, cause:{}", Throwables.getStackTraceAsString(e));
            return Response.fail("count.dealer.payment.fail");
        }
    }
}
