package com.sanlux.trade.impl.service;

import com.google.common.base.Throwables;
import com.sanlux.trade.impl.dao.OrderDispatchRelationDao;
import com.sanlux.trade.impl.manager.DispatchOrderManager;
import com.sanlux.trade.model.OrderDispatchRelation;
import com.sanlux.trade.service.OrderDispatchRelationWriteService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.parana.common.model.ParanaUser;
import io.terminus.parana.order.model.OrderBase;
import io.terminus.parana.order.model.ShopOrder;
import io.terminus.parana.shop.model.Shop;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;

/**
 * Code generated by terminus code gen
 * Desc: 订单派送关联表写服务实现类
 * Date: 2016-08-16
 */
@Slf4j
@Service
@RpcProvider
public class OrderDispatchRelationWriteServiceImpl implements OrderDispatchRelationWriteService {

    private final OrderDispatchRelationDao orderDispatchRelationDao;
    private final DispatchOrderManager dispatchOrderManager;

    @Autowired
    public OrderDispatchRelationWriteServiceImpl(OrderDispatchRelationDao orderDispatchRelationDao, DispatchOrderManager dispatchOrderManager) {
        this.orderDispatchRelationDao = orderDispatchRelationDao;
        this.dispatchOrderManager = dispatchOrderManager;
    }

    @Override
    public Response<Long> createOrderDispatchRelation(OrderDispatchRelation orderDispatchRelation) {
        try {

            orderDispatchRelationDao.create(orderDispatchRelation);

            return Response.ok(orderDispatchRelation.getId());
        } catch (Exception e) {
            log.error("create orderDispatchRelation failed, orderDispatchRelation:{},cause:{}", orderDispatchRelation, Throwables.getStackTraceAsString(e));
            return Response.fail("order.dispatch.relation.create.fail");
        }
    }

    @Override
    public Response<Boolean> dispatchOrder(OrderBase orderBase,Shop shop,ParanaUser paranaUser,Integer newOrderStatus) {
        try {
            //封装派单关系
            OrderDispatchRelation relation = new OrderDispatchRelation();
            relation.setOrderId(paranaUser.getId());
            relation.setOperateId(paranaUser.getId());
            relation.setOperateName(paranaUser.getName());
            relation.setOrderId(orderBase.getId());
            relation.setReceiveShopId(orderBase.getShopId());
            relation.setDispatchShopId(shop.getId());
            relation.setCreatedAt(new Date());
            relation.setUpdatedAt(new Date());

            ShopOrder update = new ShopOrder();
            update.setId(orderBase.getId());
            update.setShopId(shop.getId());
            update.setShopName(shop.getName());
            update.setStatus(newOrderStatus);


            dispatchOrderManager.createDispatchRelation(relation,update,orderBase.getStatus());

            return Response.ok(Boolean.TRUE);
        } catch (Exception e) {
            log.error("create orderDispatchRelation failed, order id :{},shop id:{},user id:{} ,new order status:{}, cause:{}", orderBase.getId(),shop.getId(),paranaUser.getId(),newOrderStatus, Throwables.getStackTraceAsString(e));
            return Response.fail("order.dispatch.relation.create.fail");
        }
    }


    @Override
    public Response<Boolean> updateOrderDispatchRelation(OrderDispatchRelation orderDispatchRelation) {
        try {
            return Response.ok(orderDispatchRelationDao.update(orderDispatchRelation));
        } catch (Exception e) {
            log.error("update orderDispatchRelation failed, orderDispatchRelation:{}, cause:{}", orderDispatchRelation, Throwables.getStackTraceAsString(e));
            return Response.fail("order.dispatch.relation.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteOrderDispatchRelationById(Long orderDispatchRelationId) {
        try {
            return Response.ok(orderDispatchRelationDao.delete(orderDispatchRelationId));
        } catch (Exception e) {
            log.error("delete orderDispatchRelation failed, orderDispatchRelationId:{}, cause:{}", orderDispatchRelationId, Throwables.getStackTraceAsString(e));
            return Response.fail("order.dispatch.relation.delete.fail");
        }
    }
}
