package com.sanlux.trade.impl.service;

import com.google.common.base.Throwables;
import com.sanlux.trade.enums.IntegrationOrderStatus;
import com.sanlux.trade.impl.dao.IntegrationOrderDao;
import com.sanlux.trade.model.IntegrationOrder;
import com.sanlux.trade.service.IntegrationOrderWriteService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Code generated by terminus code gen
 * Desc: 积分商品订单写服务实现类
 * Date: 2016-11-07
 */
@Slf4j
@Service
@RpcProvider
public class IntegrationOrderWriteServiceImpl implements IntegrationOrderWriteService {

    private final IntegrationOrderDao integrationOrderDao;

    @Autowired
    public IntegrationOrderWriteServiceImpl(IntegrationOrderDao integrationOrderDao) {
        this.integrationOrderDao = integrationOrderDao;
    }

    @Override
    public Response<Long> create(IntegrationOrder integrationOrder) {
        try {
            integrationOrderDao.create(integrationOrder);
            return Response.ok(integrationOrder.getId());
        } catch (Exception e) {
            log.error("create integrationOrder failed, integrationOrder:{}, cause:{}", integrationOrder, Throwables.getStackTraceAsString(e));
            return Response.fail("integration.order.create.fail");
        }
    }

    @Override
    public Response<Boolean> update(IntegrationOrder integrationOrder) {
        try {
            return Response.ok(integrationOrderDao.update(integrationOrder));
        } catch (Exception e) {
            log.error("update integrationOrder failed, integrationOrder:{}, cause:{}", integrationOrder, Throwables.getStackTraceAsString(e));
            return Response.fail("integration.order.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteById(Long integrationOrderId) {
        try {
            return Response.ok(integrationOrderDao.delete(integrationOrderId));
        } catch (Exception e) {
            log.error("delete integrationOrder failed, integrationOrderId:{}, cause:{}",
                    integrationOrderId, Throwables.getStackTraceAsString(e));
            return Response.fail("integration.order.delete.fail");
        }
    }

    @Override
    public Response<Boolean> delivery(Long id, String deliveryCompany, String deliveryNo) {
        try {
            IntegrationOrder order = new IntegrationOrder();
            order.setId(id);
            order.setDeliveryCompany(deliveryCompany);
            order.setDeliveryNo(deliveryNo);
            order.setStatus(IntegrationOrderStatus.DONE.value());

            return Response.ok(integrationOrderDao.delivery(order));
        } catch (Exception e) {
            log.error("fail to delivery integration order, id:{}, deliveryCompany:{}, deliveryNo:{}, cause:{}",
                    id, deliveryCompany, deliveryNo, Throwables.getStackTraceAsString(e));
            return Response.fail("delivery.integration.order.fail");
        }
    }
}
