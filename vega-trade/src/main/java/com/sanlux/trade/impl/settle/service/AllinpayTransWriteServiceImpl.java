package com.sanlux.trade.impl.settle.service;

import com.google.common.base.Throwables;
import com.sanlux.trade.impl.settle.dao.AllinpayTransDao;
import com.sanlux.trade.settle.model.AllinpayTrans;
import com.sanlux.trade.settle.service.AllinpayTransWriteService;
import io.terminus.boot.rpc.common.annotation.RpcProvider;
import io.terminus.common.model.Response;
import io.terminus.common.utils.Arguments;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Code generated by terminus code gen
 * Desc: 写服务实现类
 * Date: 2016-10-20
 */
@Slf4j
@Service
@RpcProvider
public class AllinpayTransWriteServiceImpl implements AllinpayTransWriteService {

    private final AllinpayTransDao allinpayTransDao;

    @Autowired
    public AllinpayTransWriteServiceImpl(AllinpayTransDao allinpayTransDao) {
        this.allinpayTransDao = allinpayTransDao;
    }

    @Override
    public Response<Long> create(AllinpayTrans allinpayTrans) {
        try {

            //这里暂不判断是否重复，因为该表只做一个记录功能，并不参与其他业务逻辑，而且通联的正向账务和逆向账务的商家流水号和通联流水号相同，
            // 所以会存在一条正向多条逆向的账务的商家流水号和通联流水号都一样的情况
            /**
             * [2017-02-06T02:29:30.789012539Z]   ZF|2017-01-18|109115711610012|2017-01-17 09:33:25|20170117093315000000000000001600|201701170933195804|0.02|0.00|0.02|156|2|
             [2017-02-06T02:29:30.78902179Z ]   ZF|2017-01-18|109115711610012|2017-01-17 09:36:54|20170117093645000000000000001601|201701170936485920|0.02|0.00|0.02|156|2|
             [2017-02-06T02:29:30.789028828Z]   ZF|2017-01-18|109115711610012|2017-01-17 10:42:18|20170117104208000000000000001607|201701171042118534|0.02|0.00|0.02|156|2|
             [2017-02-06T02:29:30.789035112Z]   ZF|2017-01-18|109115711610012|2017-01-17 10:44:33|20170117104425000000000000001608|201701171044288627|0.02|0.00|0.02|156|2|
             [2017-02-06T02:29:30.789041305Z]   TH|2017-01-18|109115711610012|2017-01-17 11:06:39|20170117093645000000000000001601|201701170936485920|0.02|0.00|0.00|156|2|
             [2017-02-06T02:29:30.789047714Z]   TH|2017-01-18|109115711610012|2017-01-17 11:14:49|20170117104425000000000000001608|201701171044288627|0.02|0.00|0.00|156|2|
             */
            /*AllinpayTrans exist = allinpayTransDao.findByTradeNo(allinpayTrans.getTradeNo());
            if(Arguments.notNull(exist)){
                return Response.ok(exist.getId());
            }*/

            allinpayTransDao.create(allinpayTrans);
            return Response.ok(allinpayTrans.getId());
        } catch (Exception e) {
            log.error("create allinpayTrans failed, allinpayTrans:{}, cause:{}", allinpayTrans, Throwables.getStackTraceAsString(e));
            return Response.fail("allinpay.trans.create.fail");
        }
    }

    @Override
    public Response<Boolean> update(AllinpayTrans allinpayTrans) {
        try {
            return Response.ok(allinpayTransDao.update(allinpayTrans));
        } catch (Exception e) {
            log.error("update allinpayTrans failed, allinpayTrans:{}, cause:{}", allinpayTrans, Throwables.getStackTraceAsString(e));
            return Response.fail("allinpay.trans.update.fail");
        }
    }

    @Override
    public Response<Boolean> deleteById(Long allinpayTransId) {
        try {
            return Response.ok(allinpayTransDao.delete(allinpayTransId));
        } catch (Exception e) {
            log.error("delete allinpayTrans failed, allinpayTransId:{}, cause:{}", allinpayTransId, Throwables.getStackTraceAsString(e));
            return Response.fail("allinpay.trans.delete.fail");
        }
    }
}
