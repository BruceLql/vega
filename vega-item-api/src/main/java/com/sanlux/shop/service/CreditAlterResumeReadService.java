package com.sanlux.shop.service;


import com.sanlux.shop.dto.CreditAlterResumeDto;
import com.sanlux.shop.model.CreditAlterResume;
import io.terminus.common.model.Paging;
import io.terminus.common.model.Response;

import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: 经销商信用额度变更履历读服务
 * Date: 2016-08-11
 */
public interface CreditAlterResumeReadService {

    /**
     * 根据id查询经销商信用额度变更履历
     * @param creditAlterResumeId 主键id
     * @return 经销商信用额度变更履历
     */
    Response<CreditAlterResume> findById(Long creditAlterResumeId);

    /**
     * 根据经销商Id查询其信用额度变更履历
     * @param shopId 店铺ID
     * @return   经销商信用额度变更履历
     */
    Response<Paging<CreditAlterResume>> findByShopId(Long shopId, Integer pageNo, Integer pageSize);

    /**
     * 查询信用额度
     *
     * @param pageNo 页码
     * @param pageSize 分页大小
     * @param criteria 条件
     * @return credit履历
     */
    Response<Paging<CreditAlterResume>> paging(Integer pageNo, Integer pageSize, Map<String, Object> criteria);

    /**
     * 查询信用额度 Distinct by ShopID
     *
     * @param pageNo 页码
     * @param pageSize 分页大小
     * @param criteria 条件
     * @return credit履历
     */
    Response<Paging<CreditAlterResume>> pagingDistinctShopID(Integer pageNo, Integer pageSize, Map<String, Object> criteria);

    /**
     * 通过支付流水号查询额度履历
     *
     * @param tradeNo 支付流水号
     * @return 履历信息
     */
    Response<CreditAlterResume> findByTradeNo(String tradeNo);

    /**
     * 通过支付流水号查询额度履历
     *
     * @param paymentCode 第三方支付流水号
     * @return 履历信息
     */
    Response<CreditAlterResume> findByPaymentCode(String paymentCode);

    Response<CreditAlterResume> findByRefundNo(String refundNo);

    Response<CreditAlterResume> findByRefundCode(String refundCode);

    /**
     * 按起止时间查询店铺消费履历信息
     *
     * @param shopId 店铺ID
     * @param userId 用户ID
     * @param startAt 起始时间
     * @param endAt 结束时间
     * @return 履历信息
     */
    Response<CreditAlterResumeDto> listMonthlyAlterResumeByShopIdOrUserId(Long shopId,
                                                                  Long userId,
                                                                  Integer pageNo,
                                                                  Integer pageSize,
                                                                  Date startAt,
                                                                  Date endAt,
                                                                  Integer status);

    /**
     * 查询所有需要还款的经销商
     * @param deadLine 截止日期
     * @return 履历信息
     */
    Response<List<CreditAlterResume>> listShouldRepaymentShops(Date deadLine);

    /**
     * 获取经销商待还款待审核数量
     * @return Long
     */
    Response<Long> countRepayment ();

    /**
     * 根据用户Id确认专属会员是否还有信用额度未还款
     *
     * @return 是否
     */
    Response<Boolean> checkWaitRepaymentCountByUserId (Long userId);
}
