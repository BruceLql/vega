package com.sanlux.user.service;

import com.sanlux.user.dto.scope.ShopUserDto;
import com.sanlux.user.model.ShopUser;
import io.terminus.common.model.Response;

import java.util.List;

/**
 * Code generated by terminus code gen
 * Desc: 经销商设定用户指定折扣表写服务
 * Date: 2016-08-03
 */

public interface ShopUserWriteService {

    /**
     * 创建shopUserDiscount
     * @param shopUser 专属会员
     * @return 主键id
     */
    Response<Long> createShopUserDiscount(ShopUser shopUser);

    /**
     * 更新shopUserDiscount
     * @param shopUser 专属会员
     * @return 是否成功
     */
    Response<Boolean> updateShopUserDiscount(ShopUser shopUser);

    /**
     * 根据主键id删除shopUserDiscount
     * @param shopUserDiscountId 专属会员
     * @return 是否成功
     */
    Response<Boolean> deleteShopUserDiscountById(Long shopUserDiscountId);


    /**ame
     * 经销商通过手机号添加新的用户,如果该经销商用户表已经存在返回用户详细信息并提示,如果经销商用户表不存在则添加并返回用户详细信息。
     * @param mobile 手机号
     * @param shopId 经销商ID
     * @param shopName 经销商名称
     * @param extra    备注
     * @return 是否成功
     */
    Response<Boolean> addShopUser(String mobile, Long shopId, String shopName, String extra);


    /**
     * 经销商添加会员信息
     * @param shopUserDto 会员信息
     * @return 是否成功
     */
    Response<Boolean> addShopUser(ShopUserDto shopUserDto);

    /**
     * 经销商修改会员信息
     * @param shopUserDto 会员信息
     * @return 是否成功
     */
    Response<Boolean> updateShopUser(ShopUserDto shopUserDto);

    /**
     * 经销商设置用户特殊折扣
     * @param shopId 经销商ID
     * @param userId 用户ID
     * @param discount 折扣
     *
     * @return 是否成功
     */
    Response<Boolean> updateShopUserDiscount(Long shopId,Long userId,Integer discount);

    /**
     * 更改专属会员可用信用额度
     * @param userId 用户Id
     * @param availableCredit 可用信用额度
     * @param totalCredit     总信用额度
     *
     * @return 是否成功
     */
    Response<Boolean> updateShopUserCreditByUserId(Long userId, Long availableCredit, Long totalCredit);

    /**
     * 新增或修改专属会员信用额度
     * @param userId   用户Id
     * @param shopUser 专属会员信息
     *
     * @return 是否成功
     */
    Response<Boolean> AddOrUpdateShopUserCreditByUserId(Long userId, ShopUser shopUser);

    /**
     * 根据用户ID删除经销商用户
     * @param userId
     * @return
     */
    Response<Boolean> deleteShopUserById(Long userId);


    /**
     * 根据店铺ID删除店铺专属会员
     * @param ShopId 店铺ID
     * @return
     */
    Response<Boolean> deleteShopUserByShopId(Long ShopId);

    /**
     * 根据用户ID同步经销商用户表和用户表的信息
     * @param userId 用户ID
     * @return 用户信息是否同步成功
     */
    Response<Boolean> refreshShopUserByUserId(Long userId);

    /**
     * 根据用户ID修改信用额度状态(可用/不可用)
     * @param userId 用户ID
     * @param isAvailable 是否可用
     * @return 修改结果
     */
    Response<Boolean> changeCreditStatusByUserId(Long userId, Boolean isAvailable);

    /**
     * 批量冻结专属会员信用额度
     * @param userIds 专属会员ID
     * @return 操作结果
     */
    Response<Boolean> batchFrozeUserCredit(List<Long> userIds);


}