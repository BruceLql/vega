package com.sanlux.trade.service;

import io.terminus.common.model.Response;

import java.util.List;
import java.util.Map;

/**
 * Code generated by terminus code gen
 * Desc: 写服务
 * Date: 2016-08-09
 */

public interface VegaOrderWriteService {

    /**
     * 更新订单tags信息
     * @param shopOrderId 订单id
     * @param extra 扩展信息
     * @return 是否成功
     */
    Response<Boolean> updateShopOrderTagsJsonById(Long shopOrderId,Map<String,String> extra);

    /**
     * 修改订单运费
     *
     * @param orderId 订单ID
     * @param newFee 修改后的订单价格(订单原始金额+新改价运费+原改价金额)
     * @param shipFee 运费金额
     * @return 是否成功
     */
    Response<Boolean> changeShopOrderShipFeeById(Long orderId, Long newFee, Integer shipFee);

    /**
     * 修改总单价格
     *
     * @param orderId 订单ID
     * @param newFee 修改后的订单价格(订单原始金额+运费+改价金额)
     * @param diffFee 改价金额
     * @return 是否成功
     */
    Response<Boolean> changeShopOrderDiffFeeById(Long orderId, Long newFee, Integer diffFee);


    /**
     * 店铺订单级别的状态发生改变, 经销商拒绝派给自己的订单
     * 订单的店铺信息需要回滚到派单前,派送关系表需要清除派送关联信息
     * @param shopOrderId   店铺订单id
     * @param orderDispatchRelationId   订单派送关联信息id
     * @param receiveShopId   接单店铺id
     * @param receiveShopName   接单店铺名称
     * @param currentStatus 当前订单状态
     * @param newStatus     新的目标状态
     * @return 状态是否改变成功
     */
    Response<Boolean> shopOrderStatusChangedForDealerReject(Long shopOrderId,Long orderDispatchRelationId,Long receiveShopId,
                                                      String receiveShopName,Integer currentStatus,Integer newStatus);





    /**
     * 供子单申请退货后，需要在总单级别确认收货
     * 和产品中OrderWriteService.shopOrderStatusChanged 相似，只是这里没有判断 所有的子订单状态是否和父订单的状态是否一致

     * 店铺订单级别的状态发生改变, 一般会引起其下子订单的状态随之发生改变, 调用方负责判断状态变迁的合法性
     *
     * @param shopOrderId   店铺订单id
     * @param currentStatus 当前状态
     * @param newStatus     新的目标状态
     * @return 状态是否改变成功
     */
    Response<Boolean> shopOrderStatusChanged(Long shopOrderId, Integer currentStatus, Integer newStatus);


    /**
     * 批量更新订单状态,用于发货时调用,改写原有方法
     *
     * @param shopOrderIds  订单Ids
     * @param currentStatus 当前状态
     * @param newStatus     新的目标状态
     * @return 是否成功
     */
    Response<List<Long>> batchShopOrderStatusChanged(List<Long> shopOrderIds, Integer currentStatus, Integer newStatus);


    /**
     * 修改订单支付类型,运营后台进行线下支付跳转时进行调用
     *
     * @param orderId 订单Id
     * @param payType 支付类型
     * @return 是否成功
     */
    Response<Boolean> updateOrderPayType(Long orderId, Integer payType);

    /**
     * 更新订单tags信息
     * @param skuOrderId 订单id
     * @param tags tag信息
     * @return 是否成功
     */
    Response<Boolean> updateSkuOrderTagsJsonById(Long skuOrderId,Map<String,String> tags);

}